#!/usr/bin/env python

#
# Generated Fri Sep 11 18:37:06 2009 by generateDS.py version 1.18e.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper:
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class _MemberSpec(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type(self): return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class TODOLIST(GeneratedsSuper):
    _member_data_items = [
        _MemberSpec('FILEVERSION', 'xs:string', 0),
        _MemberSpec('PROJECTNAME', 'xs:string', 0),
        _MemberSpec('FILENAME', 'xs:string', 0),
        _MemberSpec('CUSTOMCOMMENTSTYPE', 'xs:string', 0),
        _MemberSpec('LASTMODIFIED', 'xs:string', 0),
        _MemberSpec('EARLIESTDUEDATE', 'xs:string', 0),
        _MemberSpec('NEXTUNIQUEID', 'xs:string', 0),
        _MemberSpec('FILEFORMAT', 'xs:string', 0),
        _MemberSpec('TASK', 'TASK', 1),
        _MemberSpec('CATEGORY', 'CATEGORY', 1),
        _MemberSpec('STATUS', 'STATUS', 1),
        _MemberSpec('PERSON', 'PERSON', 1),
        _MemberSpec('ALLOCATEDBY', 'ALLOCATEDBY', 1),
        _MemberSpec('VERSION', 'VERSION', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, FILEVERSION=None, PROJECTNAME=None, FILENAME=None, CUSTOMCOMMENTSTYPE=None, LASTMODIFIED=None, EARLIESTDUEDATE=None, NEXTUNIQUEID=None, FILEFORMAT=None, TASK=None, CATEGORY=None, STATUS=None, PERSON=None, ALLOCATEDBY=None, VERSION=None):
        self.FILEVERSION = _cast(None, FILEVERSION)
        self.PROJECTNAME = _cast(None, PROJECTNAME)
        self.FILENAME = _cast(None, FILENAME)
        self.CUSTOMCOMMENTSTYPE = _cast(None, CUSTOMCOMMENTSTYPE)
        self.LASTMODIFIED = _cast(None, LASTMODIFIED)
        self.EARLIESTDUEDATE = _cast(None, EARLIESTDUEDATE)
        self.NEXTUNIQUEID = _cast(None, NEXTUNIQUEID)
        self.FILEFORMAT = _cast(None, FILEFORMAT)
        if TASK is None:
            self.TASK = []
        else:
            self.TASK = TASK
        if CATEGORY is None:
            self.CATEGORY = []
        else:
            self.CATEGORY = CATEGORY
        if STATUS is None:
            self.STATUS = []
        else:
            self.STATUS = STATUS
        if PERSON is None:
            self.PERSON = []
        else:
            self.PERSON = PERSON
        if ALLOCATEDBY is None:
            self.ALLOCATEDBY = []
        else:
            self.ALLOCATEDBY = ALLOCATEDBY
        if VERSION is None:
            self.VERSION = []
        else:
            self.VERSION = VERSION
    def factory(*args_, **kwargs_):
        if TODOLIST.subclass:
            return TODOLIST.subclass(*args_, **kwargs_)
        else:
            return TODOLIST(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TASK(self): return self.TASK
    def set_TASK(self, TASK): self.TASK = TASK
    def add_TASK(self, value): self.TASK.append(value)
    def insert_TASK(self, index, value): self.TASK[index] = value
    def get_CATEGORY(self): return self.CATEGORY
    def set_CATEGORY(self, CATEGORY): self.CATEGORY = CATEGORY
    def add_CATEGORY(self, value): self.CATEGORY.append(value)
    def insert_CATEGORY(self, index, value): self.CATEGORY[index] = value
    def get_STATUS(self): return self.STATUS
    def set_STATUS(self, STATUS): self.STATUS = STATUS
    def add_STATUS(self, value): self.STATUS.append(value)
    def insert_STATUS(self, index, value): self.STATUS[index] = value
    def get_PERSON(self): return self.PERSON
    def set_PERSON(self, PERSON): self.PERSON = PERSON
    def add_PERSON(self, value): self.PERSON.append(value)
    def insert_PERSON(self, index, value): self.PERSON[index] = value
    def get_ALLOCATEDBY(self): return self.ALLOCATEDBY
    def set_ALLOCATEDBY(self, ALLOCATEDBY): self.ALLOCATEDBY = ALLOCATEDBY
    def add_ALLOCATEDBY(self, value): self.ALLOCATEDBY.append(value)
    def insert_ALLOCATEDBY(self, index, value): self.ALLOCATEDBY[index] = value
    def get_VERSION(self): return self.VERSION
    def set_VERSION(self, VERSION): self.VERSION = VERSION
    def add_VERSION(self, value): self.VERSION.append(value)
    def insert_VERSION(self, index, value): self.VERSION[index] = value
    def get_FILEVERSION(self): return self.FILEVERSION
    def set_FILEVERSION(self, FILEVERSION): self.FILEVERSION = FILEVERSION
    def get_PROJECTNAME(self): return self.PROJECTNAME
    def set_PROJECTNAME(self, PROJECTNAME): self.PROJECTNAME = PROJECTNAME
    def get_FILENAME(self): return self.FILENAME
    def set_FILENAME(self, FILENAME): self.FILENAME = FILENAME
    def get_CUSTOMCOMMENTSTYPE(self): return self.CUSTOMCOMMENTSTYPE
    def set_CUSTOMCOMMENTSTYPE(self, CUSTOMCOMMENTSTYPE): self.CUSTOMCOMMENTSTYPE = CUSTOMCOMMENTSTYPE
    def get_LASTMODIFIED(self): return self.LASTMODIFIED
    def set_LASTMODIFIED(self, LASTMODIFIED): self.LASTMODIFIED = LASTMODIFIED
    def get_EARLIESTDUEDATE(self): return self.EARLIESTDUEDATE
    def set_EARLIESTDUEDATE(self, EARLIESTDUEDATE): self.EARLIESTDUEDATE = EARLIESTDUEDATE
    def get_NEXTUNIQUEID(self): return self.NEXTUNIQUEID
    def set_NEXTUNIQUEID(self, NEXTUNIQUEID): self.NEXTUNIQUEID = NEXTUNIQUEID
    def get_FILEFORMAT(self): return self.FILEFORMAT
    def set_FILEFORMAT(self, FILEFORMAT): self.FILEFORMAT = FILEFORMAT
    def export(self, outfile, level, namespace_='', name_='TODOLIST', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='TODOLIST')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='TODOLIST'):
        if self.FILEVERSION is not None:
            outfile.write(' FILEVERSION=%s' % (self.format_string(quote_attrib(self.FILEVERSION).encode(ExternalEncoding), input_name='FILEVERSION'), ))
        if self.PROJECTNAME is not None:
            outfile.write(' PROJECTNAME=%s' % (self.format_string(quote_attrib(self.PROJECTNAME).encode(ExternalEncoding), input_name='PROJECTNAME'), ))
        if self.FILENAME is not None:
            outfile.write(' FILENAME=%s' % (self.format_string(quote_attrib(self.FILENAME).encode(ExternalEncoding), input_name='FILENAME'), ))
        if self.CUSTOMCOMMENTSTYPE is not None:
            outfile.write(' CUSTOMCOMMENTSTYPE=%s' % (self.format_string(quote_attrib(self.CUSTOMCOMMENTSTYPE).encode(ExternalEncoding), input_name='CUSTOMCOMMENTSTYPE'), ))
        if self.LASTMODIFIED is not None:
            outfile.write(' LASTMODIFIED=%s' % (self.format_string(quote_attrib(self.LASTMODIFIED).encode(ExternalEncoding), input_name='LASTMODIFIED'), ))
        if self.EARLIESTDUEDATE is not None:
            outfile.write(' EARLIESTDUEDATE=%s' % (self.format_string(quote_attrib(self.EARLIESTDUEDATE).encode(ExternalEncoding), input_name='EARLIESTDUEDATE'), ))
        if self.NEXTUNIQUEID is not None:
            outfile.write(' NEXTUNIQUEID=%s' % (self.format_string(quote_attrib(self.NEXTUNIQUEID).encode(ExternalEncoding), input_name='NEXTUNIQUEID'), ))
        if self.FILEFORMAT is not None:
            outfile.write(' FILEFORMAT=%s' % (self.format_string(quote_attrib(self.FILEFORMAT).encode(ExternalEncoding), input_name='FILEFORMAT'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TODOLIST'):
        for TASK_ in self.TASK:
            TASK_.export(outfile, level, namespace_, name_='TASK')
        for CATEGORY_ in self.CATEGORY:
            CATEGORY_.export(outfile, level, namespace_, name_='CATEGORY')
        for STATUS_ in self.STATUS:
            STATUS_.export(outfile, level, namespace_, name_='STATUS')
        for PERSON_ in self.PERSON:
            PERSON_.export(outfile, level, namespace_, name_='PERSON')
        for ALLOCATEDBY_ in self.ALLOCATEDBY:
            ALLOCATEDBY_.export(outfile, level, namespace_, name_='ALLOCATEDBY')
        for VERSION_ in self.VERSION:
            VERSION_.export(outfile, level, namespace_, name_='VERSION')
    def hasContent_(self):
        if (
            self.TASK or
            self.CATEGORY or
            self.STATUS or
            self.PERSON or
            self.ALLOCATEDBY or
            self.VERSION
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TODOLIST'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.FILEVERSION is not None:
            showIndent(outfile, level)
            outfile.write('FILEVERSION = %s,\n' % (self.FILEVERSION,))
        if self.PROJECTNAME is not None:
            showIndent(outfile, level)
            outfile.write('PROJECTNAME = %s,\n' % (self.PROJECTNAME,))
        if self.FILENAME is not None:
            showIndent(outfile, level)
            outfile.write('FILENAME = %s,\n' % (self.FILENAME,))
        if self.CUSTOMCOMMENTSTYPE is not None:
            showIndent(outfile, level)
            outfile.write('CUSTOMCOMMENTSTYPE = %s,\n' % (self.CUSTOMCOMMENTSTYPE,))
        if self.LASTMODIFIED is not None:
            showIndent(outfile, level)
            outfile.write('LASTMODIFIED = %s,\n' % (self.LASTMODIFIED,))
        if self.EARLIESTDUEDATE is not None:
            showIndent(outfile, level)
            outfile.write('EARLIESTDUEDATE = %s,\n' % (self.EARLIESTDUEDATE,))
        if self.NEXTUNIQUEID is not None:
            showIndent(outfile, level)
            outfile.write('NEXTUNIQUEID = %s,\n' % (self.NEXTUNIQUEID,))
        if self.FILEFORMAT is not None:
            showIndent(outfile, level)
            outfile.write('FILEFORMAT = %s,\n' % (self.FILEFORMAT,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('TASK=[\n')
        level += 1
        for TASK in self.TASK:
            showIndent(outfile, level)
            outfile.write('model_.TASK(\n')
            TASK.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CATEGORY=[\n')
        level += 1
        for CATEGORY in self.CATEGORY:
            showIndent(outfile, level)
            outfile.write('model_.CATEGORY(\n')
            CATEGORY.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('STATUS=[\n')
        level += 1
        for STATUS in self.STATUS:
            showIndent(outfile, level)
            outfile.write('model_.STATUS(\n')
            STATUS.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PERSON=[\n')
        level += 1
        for PERSON in self.PERSON:
            showIndent(outfile, level)
            outfile.write('model_.PERSON(\n')
            PERSON.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ALLOCATEDBY=[\n')
        level += 1
        for ALLOCATEDBY in self.ALLOCATEDBY:
            showIndent(outfile, level)
            outfile.write('model_.ALLOCATEDBY(\n')
            ALLOCATEDBY.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('VERSION=[\n')
        level += 1
        for VERSION in self.VERSION:
            showIndent(outfile, level)
            outfile.write('model_.VERSION(\n')
            VERSION.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('FILEVERSION'):
            self.FILEVERSION = attrs.get('FILEVERSION').value
        if attrs.get('PROJECTNAME'):
            self.PROJECTNAME = attrs.get('PROJECTNAME').value
        if attrs.get('FILENAME'):
            self.FILENAME = attrs.get('FILENAME').value
        if attrs.get('CUSTOMCOMMENTSTYPE'):
            self.CUSTOMCOMMENTSTYPE = attrs.get('CUSTOMCOMMENTSTYPE').value
        if attrs.get('LASTMODIFIED'):
            self.LASTMODIFIED = attrs.get('LASTMODIFIED').value
        if attrs.get('EARLIESTDUEDATE'):
            self.EARLIESTDUEDATE = attrs.get('EARLIESTDUEDATE').value
        if attrs.get('NEXTUNIQUEID'):
            self.NEXTUNIQUEID = attrs.get('NEXTUNIQUEID').value
        if attrs.get('FILEFORMAT'):
            self.FILEFORMAT = attrs.get('FILEFORMAT').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'TASK':
            obj_ = TASK.factory()
            obj_.build(child_)
            self.TASK.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'CATEGORY':
            obj_ = CATEGORY.factory()
            obj_.build(child_)
            self.CATEGORY.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'STATUS':
            obj_ = STATUS.factory()
            obj_.build(child_)
            self.STATUS.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PERSON':
            obj_ = PERSON.factory()
            obj_.build(child_)
            self.PERSON.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ALLOCATEDBY':
            obj_ = ALLOCATEDBY.factory()
            obj_.build(child_)
            self.ALLOCATEDBY.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'VERSION':
            obj_ = VERSION.factory()
            obj_.build(child_)
            self.VERSION.append(obj_)
    def walk_and_update(self):
        members = TODOLIST._member_data_items
        for member in members:
            obj1 = getattr(self, member.get_name())
            if member.get_data_type() == 'xs:date':
                newvalue = date_calcs.date_from_string(obj1)
                setattr(self, member.get_name(), newvalue)
            elif member.get_container():
                for child in obj1:
                    if type(child) == types.InstanceType:
                        child.walk_and_update()
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_update()
        if TODOLIST.superclass != None:
          TODOLIST.superclass.walk_and_update(self)
    def walk_and_show(self, depth):
        global counter
        counter += 1
        depth += 1
        print '%d. class: TODOLIST  depth: %d' % (counter, depth, )
        members = TODOLIST._member_data_items
        for member in members:
            s1 = member.get_name()
            s2 = member.get_data_type()
            s3 = '%d' % member.get_container()
            obj1 = getattr(self, member.get_name())
            if member.get_container():
                s4 = '<container>'
            else:
                if type(obj1) != types.InstanceType:
                    s4 = '%s' % obj1
                else:
                    s4 = '<instance>'
            s5 = '%s%s%s  %s' % (s1.ljust(16), s2.ljust(16), s3.rjust(4), s4, )
            print '   ', s5
        for member in members:
            if member.get_container():
                for child in getattr(self, member.get_name()):
                    if type(child) == types.InstanceType:
                        child.walk_and_show(depth)
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_show(depth)
# end class TODOLIST


class TASK(GeneratedsSuper):
    _member_data_items = [
        _MemberSpec('CATEGORY1', 'xs:string', 0),
        _MemberSpec('STARTDATE', 'xs:string', 0),
        _MemberSpec('CATEGORY3', 'xs:string', 0),
        _MemberSpec('CATEGORY2', 'xs:string', 0),
        _MemberSpec('CATEGORY5', 'xs:string', 0),
        _MemberSpec('CATEGORY4', 'xs:string', 0),
        _MemberSpec('CATEGORY7', 'xs:string', 0),
        _MemberSpec('CATEGORY6', 'xs:string', 0),
        _MemberSpec('CATEGORY9', 'xs:string', 0),
        _MemberSpec('CATEGORY8', 'xs:string', 0),
        _MemberSpec('NUMPERSON', 'xs:string', 0),
        _MemberSpec('PERSON2', 'xs:string', 0),
        _MemberSpec('PERSON3', 'xs:string', 0),
        _MemberSpec('COST', 'xs:string', 0),
        _MemberSpec('EXTERNALID', 'xs:string', 0),
        _MemberSpec('DEPENDS9', 'xs:string', 0),
        _MemberSpec('PERSON4', 'xs:string', 0),
        _MemberSpec('PERSON5', 'xs:string', 0),
        _MemberSpec('DUEDATESTRING', 'xs:string', 0),
        _MemberSpec('ICONINDEX', 'xs:string', 0),
        _MemberSpec('CREATIONDATESTRING', 'xs:string', 0),
        _MemberSpec('PERSON9', 'xs:string', 0),
        _MemberSpec('WEBCOLOR', 'xs:string', 0),
        _MemberSpec('PERSON8', 'xs:string', 0),
        _MemberSpec('LASTMOD', 'xs:string', 0),
        _MemberSpec('TIMEESTUNITS', 'xs:string', 0),
        _MemberSpec('COLOR', 'xs:string', 0),
        _MemberSpec('TITLE', 'xs:string', 0),
        _MemberSpec('LASTMODSTRING', 'xs:string', 0),
        _MemberSpec('PRIORITYWEBCOLOR', 'xs:string', 0),
        _MemberSpec('POS', 'xs:string', 0),
        _MemberSpec('ID', 'xs:string', 0),
        _MemberSpec('PRIORITY', 'xs:string', 0),
        _MemberSpec('CALCTIMESPENT', 'xs:string', 0),
        _MemberSpec('DEPENDS', 'xs:string', 0),
        _MemberSpec('NUMCATEGORY', 'xs:string', 0),
        _MemberSpec('DONEDATESTRING', 'xs:string', 0),
        _MemberSpec('CREATIONDATE', 'xs:string', 0),
        _MemberSpec('PERCENTDONE', 'xs:string', 0),
        _MemberSpec('TIMEESTIMATE', 'xs:string', 0),
        _MemberSpec('STATUS', 'xs:string', 0),
        _MemberSpec('DEPENDS7', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY', 'xs:string', 0),
        _MemberSpec('DONEDATE', 'xs:string', 0),
        _MemberSpec('RISK', 'xs:string', 0),
        _MemberSpec('STARTDATESTRING', 'xs:string', 0),
        _MemberSpec('TEXTCOLOR', 'xs:string', 0),
        _MemberSpec('NUMDEPENDS', 'xs:string', 0),
        _MemberSpec('CALCPERCENTDONE', 'xs:string', 0),
        _MemberSpec('FLAG', 'xs:string', 0),
        _MemberSpec('VERSION', 'xs:string', 0),
        _MemberSpec('TIMESPENT', 'xs:string', 0),
        _MemberSpec('TEXTWEBCOLOR', 'xs:string', 0),
        _MemberSpec('PRIORITYCOLOR', 'xs:string', 0),
        _MemberSpec('FILEREFPATH', 'xs:string', 0),
        _MemberSpec('DUEDATE', 'xs:string', 0),
        _MemberSpec('CALCTIMEESTIMATE', 'xs:string', 0),
        _MemberSpec('CATEGORY', 'xs:string', 0),
        _MemberSpec('DEPENDS6', 'xs:string', 0),
        _MemberSpec('DEPENDS5', 'xs:string', 0),
        _MemberSpec('DEPENDS4', 'xs:string', 0),
        _MemberSpec('DEPENDS3', 'xs:string', 0),
        _MemberSpec('DEPENDS2', 'xs:string', 0),
        _MemberSpec('DEPENDS1', 'xs:string', 0),
        _MemberSpec('CUSTOMCOMMENTS', 'xs:string', 0),
        _MemberSpec('TIMESPENTUNITS', 'xs:string', 0),
        _MemberSpec('COMMENTS', 'xs:string', 0),
        _MemberSpec('DEPENDS8', 'xs:string', 0),
        _MemberSpec('PERSON', 'xs:string', 0),
        _MemberSpec('PERSON1', 'xs:string', 0),
        _MemberSpec('CALCCOST', 'xs:string', 0),
        _MemberSpec('PERSON6', 'xs:string', 0),
        _MemberSpec('COMMENTSTYPE', 'xs:string', 0),
        _MemberSpec('PERSON7', 'xs:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, CATEGORY1=None, STARTDATE=None, CATEGORY3=None, CATEGORY2=None, CATEGORY5=None, CATEGORY4=None, CATEGORY7=None, CATEGORY6=None, CATEGORY9=None, CATEGORY8=None, NUMPERSON=None, PERSON2=None, PERSON3=None, COST=None, EXTERNALID=None, DEPENDS9=None, PERSON4=None, PERSON5=None, DUEDATESTRING=None, ICONINDEX=None, CREATIONDATESTRING=None, PERSON9=None, WEBCOLOR=None, PERSON8=None, LASTMOD=None, TIMEESTUNITS=None, COLOR=None, TITLE=None, LASTMODSTRING=None, PRIORITYWEBCOLOR=None, POS=None, ID=None, PRIORITY=None, CALCTIMESPENT=None, DEPENDS=None, NUMCATEGORY=None, DONEDATESTRING=None, CREATIONDATE=None, PERCENTDONE=None, TIMEESTIMATE=None, STATUS=None, DEPENDS7=None, ALLOCATEDBY=None, DONEDATE=None, RISK=None, STARTDATESTRING=None, TEXTCOLOR=None, NUMDEPENDS=None, CALCPERCENTDONE=None, FLAG=None, VERSION=None, TIMESPENT=None, TEXTWEBCOLOR=None, PRIORITYCOLOR=None, FILEREFPATH=None, DUEDATE=None, CALCTIMEESTIMATE=None, CATEGORY=None, DEPENDS6=None, DEPENDS5=None, DEPENDS4=None, DEPENDS3=None, DEPENDS2=None, DEPENDS1=None, CUSTOMCOMMENTS=None, TIMESPENTUNITS=None, COMMENTS=None, DEPENDS8=None, PERSON=None, PERSON1=None, CALCCOST=None, PERSON6=None, COMMENTSTYPE=None, PERSON7=None, valueOf_=''):
        self.CATEGORY1 = _cast(None, CATEGORY1)
        self.STARTDATE = _cast(None, STARTDATE)
        self.CATEGORY3 = _cast(None, CATEGORY3)
        self.CATEGORY2 = _cast(None, CATEGORY2)
        self.CATEGORY5 = _cast(None, CATEGORY5)
        self.CATEGORY4 = _cast(None, CATEGORY4)
        self.CATEGORY7 = _cast(None, CATEGORY7)
        self.CATEGORY6 = _cast(None, CATEGORY6)
        self.CATEGORY9 = _cast(None, CATEGORY9)
        self.CATEGORY8 = _cast(None, CATEGORY8)
        self.NUMPERSON = _cast(None, NUMPERSON)
        self.PERSON2 = _cast(None, PERSON2)
        self.PERSON3 = _cast(None, PERSON3)
        self.COST = _cast(None, COST)
        self.EXTERNALID = _cast(None, EXTERNALID)
        self.DEPENDS9 = _cast(None, DEPENDS9)
        self.PERSON4 = _cast(None, PERSON4)
        self.PERSON5 = _cast(None, PERSON5)
        self.DUEDATESTRING = _cast(None, DUEDATESTRING)
        self.ICONINDEX = _cast(None, ICONINDEX)
        self.CREATIONDATESTRING = _cast(None, CREATIONDATESTRING)
        self.PERSON9 = _cast(None, PERSON9)
        self.WEBCOLOR = _cast(None, WEBCOLOR)
        self.PERSON8 = _cast(None, PERSON8)
        self.LASTMOD = _cast(None, LASTMOD)
        self.TIMEESTUNITS = _cast(None, TIMEESTUNITS)
        self.COLOR = _cast(None, COLOR)
        self.TITLE = _cast(None, TITLE)
        self.LASTMODSTRING = _cast(None, LASTMODSTRING)
        self.PRIORITYWEBCOLOR = _cast(None, PRIORITYWEBCOLOR)
        self.POS = _cast(None, POS)
        self.ID = _cast(None, ID)
        self.PRIORITY = _cast(None, PRIORITY)
        self.CALCTIMESPENT = _cast(None, CALCTIMESPENT)
        self.DEPENDS = _cast(None, DEPENDS)
        self.NUMCATEGORY = _cast(None, NUMCATEGORY)
        self.DONEDATESTRING = _cast(None, DONEDATESTRING)
        self.CREATIONDATE = _cast(None, CREATIONDATE)
        self.PERCENTDONE = _cast(None, PERCENTDONE)
        self.TIMEESTIMATE = _cast(None, TIMEESTIMATE)
        self.STATUS = _cast(None, STATUS)
        self.DEPENDS7 = _cast(None, DEPENDS7)
        self.ALLOCATEDBY = _cast(None, ALLOCATEDBY)
        self.DONEDATE = _cast(None, DONEDATE)
        self.RISK = _cast(None, RISK)
        self.STARTDATESTRING = _cast(None, STARTDATESTRING)
        self.TEXTCOLOR = _cast(None, TEXTCOLOR)
        self.NUMDEPENDS = _cast(None, NUMDEPENDS)
        self.CALCPERCENTDONE = _cast(None, CALCPERCENTDONE)
        self.FLAG = _cast(None, FLAG)
        self.VERSION = _cast(None, VERSION)
        self.TIMESPENT = _cast(None, TIMESPENT)
        self.TEXTWEBCOLOR = _cast(None, TEXTWEBCOLOR)
        self.PRIORITYCOLOR = _cast(None, PRIORITYCOLOR)
        self.FILEREFPATH = _cast(None, FILEREFPATH)
        self.DUEDATE = _cast(None, DUEDATE)
        self.CALCTIMEESTIMATE = _cast(None, CALCTIMEESTIMATE)
        self.CATEGORY = _cast(None, CATEGORY)
        self.DEPENDS6 = _cast(None, DEPENDS6)
        self.DEPENDS5 = _cast(None, DEPENDS5)
        self.DEPENDS4 = _cast(None, DEPENDS4)
        self.DEPENDS3 = _cast(None, DEPENDS3)
        self.DEPENDS2 = _cast(None, DEPENDS2)
        self.DEPENDS1 = _cast(None, DEPENDS1)
        self.CUSTOMCOMMENTS = _cast(None, CUSTOMCOMMENTS)
        self.TIMESPENTUNITS = _cast(None, TIMESPENTUNITS)
        self.COMMENTS = _cast(None, COMMENTS)
        self.DEPENDS8 = _cast(None, DEPENDS8)
        self.PERSON = _cast(None, PERSON)
        self.PERSON1 = _cast(None, PERSON1)
        self.CALCCOST = _cast(None, CALCCOST)
        self.PERSON6 = _cast(None, PERSON6)
        self.COMMENTSTYPE = _cast(None, COMMENTSTYPE)
        self.PERSON7 = _cast(None, PERSON7)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TASK.subclass:
            return TASK.subclass(*args_, **kwargs_)
        else:
            return TASK(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CATEGORY1(self): return self.CATEGORY1
    def set_CATEGORY1(self, CATEGORY1): self.CATEGORY1 = CATEGORY1
    def get_STARTDATE(self): return self.STARTDATE
    def set_STARTDATE(self, STARTDATE): self.STARTDATE = STARTDATE
    def get_CATEGORY3(self): return self.CATEGORY3
    def set_CATEGORY3(self, CATEGORY3): self.CATEGORY3 = CATEGORY3
    def get_CATEGORY2(self): return self.CATEGORY2
    def set_CATEGORY2(self, CATEGORY2): self.CATEGORY2 = CATEGORY2
    def get_CATEGORY5(self): return self.CATEGORY5
    def set_CATEGORY5(self, CATEGORY5): self.CATEGORY5 = CATEGORY5
    def get_CATEGORY4(self): return self.CATEGORY4
    def set_CATEGORY4(self, CATEGORY4): self.CATEGORY4 = CATEGORY4
    def get_CATEGORY7(self): return self.CATEGORY7
    def set_CATEGORY7(self, CATEGORY7): self.CATEGORY7 = CATEGORY7
    def get_CATEGORY6(self): return self.CATEGORY6
    def set_CATEGORY6(self, CATEGORY6): self.CATEGORY6 = CATEGORY6
    def get_CATEGORY9(self): return self.CATEGORY9
    def set_CATEGORY9(self, CATEGORY9): self.CATEGORY9 = CATEGORY9
    def get_CATEGORY8(self): return self.CATEGORY8
    def set_CATEGORY8(self, CATEGORY8): self.CATEGORY8 = CATEGORY8
    def get_NUMPERSON(self): return self.NUMPERSON
    def set_NUMPERSON(self, NUMPERSON): self.NUMPERSON = NUMPERSON
    def get_PERSON2(self): return self.PERSON2
    def set_PERSON2(self, PERSON2): self.PERSON2 = PERSON2
    def get_PERSON3(self): return self.PERSON3
    def set_PERSON3(self, PERSON3): self.PERSON3 = PERSON3
    def get_COST(self): return self.COST
    def set_COST(self, COST): self.COST = COST
    def get_EXTERNALID(self): return self.EXTERNALID
    def set_EXTERNALID(self, EXTERNALID): self.EXTERNALID = EXTERNALID
    def get_DEPENDS9(self): return self.DEPENDS9
    def set_DEPENDS9(self, DEPENDS9): self.DEPENDS9 = DEPENDS9
    def get_PERSON4(self): return self.PERSON4
    def set_PERSON4(self, PERSON4): self.PERSON4 = PERSON4
    def get_PERSON5(self): return self.PERSON5
    def set_PERSON5(self, PERSON5): self.PERSON5 = PERSON5
    def get_DUEDATESTRING(self): return self.DUEDATESTRING
    def set_DUEDATESTRING(self, DUEDATESTRING): self.DUEDATESTRING = DUEDATESTRING
    def get_ICONINDEX(self): return self.ICONINDEX
    def set_ICONINDEX(self, ICONINDEX): self.ICONINDEX = ICONINDEX
    def get_CREATIONDATESTRING(self): return self.CREATIONDATESTRING
    def set_CREATIONDATESTRING(self, CREATIONDATESTRING): self.CREATIONDATESTRING = CREATIONDATESTRING
    def get_PERSON9(self): return self.PERSON9
    def set_PERSON9(self, PERSON9): self.PERSON9 = PERSON9
    def get_WEBCOLOR(self): return self.WEBCOLOR
    def set_WEBCOLOR(self, WEBCOLOR): self.WEBCOLOR = WEBCOLOR
    def get_PERSON8(self): return self.PERSON8
    def set_PERSON8(self, PERSON8): self.PERSON8 = PERSON8
    def get_LASTMOD(self): return self.LASTMOD
    def set_LASTMOD(self, LASTMOD): self.LASTMOD = LASTMOD
    def get_TIMEESTUNITS(self): return self.TIMEESTUNITS
    def set_TIMEESTUNITS(self, TIMEESTUNITS): self.TIMEESTUNITS = TIMEESTUNITS
    def get_COLOR(self): return self.COLOR
    def set_COLOR(self, COLOR): self.COLOR = COLOR
    def get_TITLE(self): return self.TITLE
    def set_TITLE(self, TITLE): self.TITLE = TITLE
    def get_LASTMODSTRING(self): return self.LASTMODSTRING
    def set_LASTMODSTRING(self, LASTMODSTRING): self.LASTMODSTRING = LASTMODSTRING
    def get_PRIORITYWEBCOLOR(self): return self.PRIORITYWEBCOLOR
    def set_PRIORITYWEBCOLOR(self, PRIORITYWEBCOLOR): self.PRIORITYWEBCOLOR = PRIORITYWEBCOLOR
    def get_POS(self): return self.POS
    def set_POS(self, POS): self.POS = POS
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_PRIORITY(self): return self.PRIORITY
    def set_PRIORITY(self, PRIORITY): self.PRIORITY = PRIORITY
    def get_CALCTIMESPENT(self): return self.CALCTIMESPENT
    def set_CALCTIMESPENT(self, CALCTIMESPENT): self.CALCTIMESPENT = CALCTIMESPENT
    def get_DEPENDS(self): return self.DEPENDS
    def set_DEPENDS(self, DEPENDS): self.DEPENDS = DEPENDS
    def get_NUMCATEGORY(self): return self.NUMCATEGORY
    def set_NUMCATEGORY(self, NUMCATEGORY): self.NUMCATEGORY = NUMCATEGORY
    def get_DONEDATESTRING(self): return self.DONEDATESTRING
    def set_DONEDATESTRING(self, DONEDATESTRING): self.DONEDATESTRING = DONEDATESTRING
    def get_CREATIONDATE(self): return self.CREATIONDATE
    def set_CREATIONDATE(self, CREATIONDATE): self.CREATIONDATE = CREATIONDATE
    def get_PERCENTDONE(self): return self.PERCENTDONE
    def set_PERCENTDONE(self, PERCENTDONE): self.PERCENTDONE = PERCENTDONE
    def get_TIMEESTIMATE(self): return self.TIMEESTIMATE
    def set_TIMEESTIMATE(self, TIMEESTIMATE): self.TIMEESTIMATE = TIMEESTIMATE
    def get_STATUS(self): return self.STATUS
    def set_STATUS(self, STATUS): self.STATUS = STATUS
    def get_DEPENDS7(self): return self.DEPENDS7
    def set_DEPENDS7(self, DEPENDS7): self.DEPENDS7 = DEPENDS7
    def get_ALLOCATEDBY(self): return self.ALLOCATEDBY
    def set_ALLOCATEDBY(self, ALLOCATEDBY): self.ALLOCATEDBY = ALLOCATEDBY
    def get_DONEDATE(self): return self.DONEDATE
    def set_DONEDATE(self, DONEDATE): self.DONEDATE = DONEDATE
    def get_RISK(self): return self.RISK
    def set_RISK(self, RISK): self.RISK = RISK
    def get_STARTDATESTRING(self): return self.STARTDATESTRING
    def set_STARTDATESTRING(self, STARTDATESTRING): self.STARTDATESTRING = STARTDATESTRING
    def get_TEXTCOLOR(self): return self.TEXTCOLOR
    def set_TEXTCOLOR(self, TEXTCOLOR): self.TEXTCOLOR = TEXTCOLOR
    def get_NUMDEPENDS(self): return self.NUMDEPENDS
    def set_NUMDEPENDS(self, NUMDEPENDS): self.NUMDEPENDS = NUMDEPENDS
    def get_CALCPERCENTDONE(self): return self.CALCPERCENTDONE
    def set_CALCPERCENTDONE(self, CALCPERCENTDONE): self.CALCPERCENTDONE = CALCPERCENTDONE
    def get_FLAG(self): return self.FLAG
    def set_FLAG(self, FLAG): self.FLAG = FLAG
    def get_VERSION(self): return self.VERSION
    def set_VERSION(self, VERSION): self.VERSION = VERSION
    def get_TIMESPENT(self): return self.TIMESPENT
    def set_TIMESPENT(self, TIMESPENT): self.TIMESPENT = TIMESPENT
    def get_TEXTWEBCOLOR(self): return self.TEXTWEBCOLOR
    def set_TEXTWEBCOLOR(self, TEXTWEBCOLOR): self.TEXTWEBCOLOR = TEXTWEBCOLOR
    def get_PRIORITYCOLOR(self): return self.PRIORITYCOLOR
    def set_PRIORITYCOLOR(self, PRIORITYCOLOR): self.PRIORITYCOLOR = PRIORITYCOLOR
    def get_FILEREFPATH(self): return self.FILEREFPATH
    def set_FILEREFPATH(self, FILEREFPATH): self.FILEREFPATH = FILEREFPATH
    def get_DUEDATE(self): return self.DUEDATE
    def set_DUEDATE(self, DUEDATE): self.DUEDATE = DUEDATE
    def get_CALCTIMEESTIMATE(self): return self.CALCTIMEESTIMATE
    def set_CALCTIMEESTIMATE(self, CALCTIMEESTIMATE): self.CALCTIMEESTIMATE = CALCTIMEESTIMATE
    def get_CATEGORY(self): return self.CATEGORY
    def set_CATEGORY(self, CATEGORY): self.CATEGORY = CATEGORY
    def get_DEPENDS6(self): return self.DEPENDS6
    def set_DEPENDS6(self, DEPENDS6): self.DEPENDS6 = DEPENDS6
    def get_DEPENDS5(self): return self.DEPENDS5
    def set_DEPENDS5(self, DEPENDS5): self.DEPENDS5 = DEPENDS5
    def get_DEPENDS4(self): return self.DEPENDS4
    def set_DEPENDS4(self, DEPENDS4): self.DEPENDS4 = DEPENDS4
    def get_DEPENDS3(self): return self.DEPENDS3
    def set_DEPENDS3(self, DEPENDS3): self.DEPENDS3 = DEPENDS3
    def get_DEPENDS2(self): return self.DEPENDS2
    def set_DEPENDS2(self, DEPENDS2): self.DEPENDS2 = DEPENDS2
    def get_DEPENDS1(self): return self.DEPENDS1
    def set_DEPENDS1(self, DEPENDS1): self.DEPENDS1 = DEPENDS1
    def get_CUSTOMCOMMENTS(self): return self.CUSTOMCOMMENTS
    def set_CUSTOMCOMMENTS(self, CUSTOMCOMMENTS): self.CUSTOMCOMMENTS = CUSTOMCOMMENTS
    def get_TIMESPENTUNITS(self): return self.TIMESPENTUNITS
    def set_TIMESPENTUNITS(self, TIMESPENTUNITS): self.TIMESPENTUNITS = TIMESPENTUNITS
    def get_COMMENTS(self): return self.COMMENTS
    def set_COMMENTS(self, COMMENTS): self.COMMENTS = COMMENTS
    def get_DEPENDS8(self): return self.DEPENDS8
    def set_DEPENDS8(self, DEPENDS8): self.DEPENDS8 = DEPENDS8
    def get_PERSON(self): return self.PERSON
    def set_PERSON(self, PERSON): self.PERSON = PERSON
    def get_PERSON1(self): return self.PERSON1
    def set_PERSON1(self, PERSON1): self.PERSON1 = PERSON1
    def get_CALCCOST(self): return self.CALCCOST
    def set_CALCCOST(self, CALCCOST): self.CALCCOST = CALCCOST
    def get_PERSON6(self): return self.PERSON6
    def set_PERSON6(self, PERSON6): self.PERSON6 = PERSON6
    def get_COMMENTSTYPE(self): return self.COMMENTSTYPE
    def set_COMMENTSTYPE(self, COMMENTSTYPE): self.COMMENTSTYPE = COMMENTSTYPE
    def get_PERSON7(self): return self.PERSON7
    def set_PERSON7(self, PERSON7): self.PERSON7 = PERSON7
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='TASK', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='TASK')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='TASK'):
        if self.CATEGORY1 is not None:
            outfile.write(' CATEGORY1=%s' % (self.format_string(quote_attrib(self.CATEGORY1).encode(ExternalEncoding), input_name='CATEGORY1'), ))
        if self.STARTDATE is not None:
            outfile.write(' STARTDATE=%s' % (self.format_string(quote_attrib(self.STARTDATE).encode(ExternalEncoding), input_name='STARTDATE'), ))
        if self.CATEGORY3 is not None:
            outfile.write(' CATEGORY3=%s' % (self.format_string(quote_attrib(self.CATEGORY3).encode(ExternalEncoding), input_name='CATEGORY3'), ))
        if self.CATEGORY2 is not None:
            outfile.write(' CATEGORY2=%s' % (self.format_string(quote_attrib(self.CATEGORY2).encode(ExternalEncoding), input_name='CATEGORY2'), ))
        if self.CATEGORY5 is not None:
            outfile.write(' CATEGORY5=%s' % (self.format_string(quote_attrib(self.CATEGORY5).encode(ExternalEncoding), input_name='CATEGORY5'), ))
        if self.CATEGORY4 is not None:
            outfile.write(' CATEGORY4=%s' % (self.format_string(quote_attrib(self.CATEGORY4).encode(ExternalEncoding), input_name='CATEGORY4'), ))
        if self.CATEGORY7 is not None:
            outfile.write(' CATEGORY7=%s' % (self.format_string(quote_attrib(self.CATEGORY7).encode(ExternalEncoding), input_name='CATEGORY7'), ))
        if self.CATEGORY6 is not None:
            outfile.write(' CATEGORY6=%s' % (self.format_string(quote_attrib(self.CATEGORY6).encode(ExternalEncoding), input_name='CATEGORY6'), ))
        if self.CATEGORY9 is not None:
            outfile.write(' CATEGORY9=%s' % (self.format_string(quote_attrib(self.CATEGORY9).encode(ExternalEncoding), input_name='CATEGORY9'), ))
        if self.CATEGORY8 is not None:
            outfile.write(' CATEGORY8=%s' % (self.format_string(quote_attrib(self.CATEGORY8).encode(ExternalEncoding), input_name='CATEGORY8'), ))
        if self.NUMPERSON is not None:
            outfile.write(' NUMPERSON=%s' % (self.format_string(quote_attrib(self.NUMPERSON).encode(ExternalEncoding), input_name='NUMPERSON'), ))
        if self.PERSON2 is not None:
            outfile.write(' PERSON2=%s' % (self.format_string(quote_attrib(self.PERSON2).encode(ExternalEncoding), input_name='PERSON2'), ))
        if self.PERSON3 is not None:
            outfile.write(' PERSON3=%s' % (self.format_string(quote_attrib(self.PERSON3).encode(ExternalEncoding), input_name='PERSON3'), ))
        if self.COST is not None:
            outfile.write(' COST=%s' % (self.format_string(quote_attrib(self.COST).encode(ExternalEncoding), input_name='COST'), ))
        if self.EXTERNALID is not None:
            outfile.write(' EXTERNALID=%s' % (self.format_string(quote_attrib(self.EXTERNALID).encode(ExternalEncoding), input_name='EXTERNALID'), ))
        if self.DEPENDS9 is not None:
            outfile.write(' DEPENDS9=%s' % (self.format_string(quote_attrib(self.DEPENDS9).encode(ExternalEncoding), input_name='DEPENDS9'), ))
        if self.PERSON4 is not None:
            outfile.write(' PERSON4=%s' % (self.format_string(quote_attrib(self.PERSON4).encode(ExternalEncoding), input_name='PERSON4'), ))
        if self.PERSON5 is not None:
            outfile.write(' PERSON5=%s' % (self.format_string(quote_attrib(self.PERSON5).encode(ExternalEncoding), input_name='PERSON5'), ))
        if self.DUEDATESTRING is not None:
            outfile.write(' DUEDATESTRING=%s' % (self.format_string(quote_attrib(self.DUEDATESTRING).encode(ExternalEncoding), input_name='DUEDATESTRING'), ))
        if self.ICONINDEX is not None:
            outfile.write(' ICONINDEX=%s' % (self.format_string(quote_attrib(self.ICONINDEX).encode(ExternalEncoding), input_name='ICONINDEX'), ))
        if self.CREATIONDATESTRING is not None:
            outfile.write(' CREATIONDATESTRING=%s' % (self.format_string(quote_attrib(self.CREATIONDATESTRING).encode(ExternalEncoding), input_name='CREATIONDATESTRING'), ))
        if self.PERSON9 is not None:
            outfile.write(' PERSON9=%s' % (self.format_string(quote_attrib(self.PERSON9).encode(ExternalEncoding), input_name='PERSON9'), ))
        if self.WEBCOLOR is not None:
            outfile.write(' WEBCOLOR=%s' % (self.format_string(quote_attrib(self.WEBCOLOR).encode(ExternalEncoding), input_name='WEBCOLOR'), ))
        if self.PERSON8 is not None:
            outfile.write(' PERSON8=%s' % (self.format_string(quote_attrib(self.PERSON8).encode(ExternalEncoding), input_name='PERSON8'), ))
        if self.LASTMOD is not None:
            outfile.write(' LASTMOD=%s' % (self.format_string(quote_attrib(self.LASTMOD).encode(ExternalEncoding), input_name='LASTMOD'), ))
        if self.TIMEESTUNITS is not None:
            outfile.write(' TIMEESTUNITS=%s' % (self.format_string(quote_attrib(self.TIMEESTUNITS).encode(ExternalEncoding), input_name='TIMEESTUNITS'), ))
        if self.COLOR is not None:
            outfile.write(' COLOR=%s' % (self.format_string(quote_attrib(self.COLOR).encode(ExternalEncoding), input_name='COLOR'), ))
        if self.TITLE is not None:
            outfile.write(' TITLE=%s' % (self.format_string(quote_attrib(self.TITLE).encode(ExternalEncoding), input_name='TITLE'), ))
        if self.LASTMODSTRING is not None:
            outfile.write(' LASTMODSTRING=%s' % (self.format_string(quote_attrib(self.LASTMODSTRING).encode(ExternalEncoding), input_name='LASTMODSTRING'), ))
        if self.PRIORITYWEBCOLOR is not None:
            outfile.write(' PRIORITYWEBCOLOR=%s' % (self.format_string(quote_attrib(self.PRIORITYWEBCOLOR).encode(ExternalEncoding), input_name='PRIORITYWEBCOLOR'), ))
        if self.POS is not None:
            outfile.write(' POS=%s' % (self.format_string(quote_attrib(self.POS).encode(ExternalEncoding), input_name='POS'), ))
        if self.ID is not None:
            outfile.write(' ID=%s' % (self.format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
        if self.PRIORITY is not None:
            outfile.write(' PRIORITY=%s' % (self.format_string(quote_attrib(self.PRIORITY).encode(ExternalEncoding), input_name='PRIORITY'), ))
        if self.CALCTIMESPENT is not None:
            outfile.write(' CALCTIMESPENT=%s' % (self.format_string(quote_attrib(self.CALCTIMESPENT).encode(ExternalEncoding), input_name='CALCTIMESPENT'), ))
        if self.DEPENDS is not None:
            outfile.write(' DEPENDS=%s' % (self.format_string(quote_attrib(self.DEPENDS).encode(ExternalEncoding), input_name='DEPENDS'), ))
        if self.NUMCATEGORY is not None:
            outfile.write(' NUMCATEGORY=%s' % (self.format_string(quote_attrib(self.NUMCATEGORY).encode(ExternalEncoding), input_name='NUMCATEGORY'), ))
        if self.DONEDATESTRING is not None:
            outfile.write(' DONEDATESTRING=%s' % (self.format_string(quote_attrib(self.DONEDATESTRING).encode(ExternalEncoding), input_name='DONEDATESTRING'), ))
        if self.CREATIONDATE is not None:
            outfile.write(' CREATIONDATE=%s' % (self.format_string(quote_attrib(self.CREATIONDATE).encode(ExternalEncoding), input_name='CREATIONDATE'), ))
        if self.PERCENTDONE is not None:
            outfile.write(' PERCENTDONE=%s' % (self.format_string(quote_attrib(self.PERCENTDONE).encode(ExternalEncoding), input_name='PERCENTDONE'), ))
        if self.TIMEESTIMATE is not None:
            outfile.write(' TIMEESTIMATE=%s' % (self.format_string(quote_attrib(self.TIMEESTIMATE).encode(ExternalEncoding), input_name='TIMEESTIMATE'), ))
        if self.STATUS is not None:
            outfile.write(' STATUS=%s' % (self.format_string(quote_attrib(self.STATUS).encode(ExternalEncoding), input_name='STATUS'), ))
        if self.DEPENDS7 is not None:
            outfile.write(' DEPENDS7=%s' % (self.format_string(quote_attrib(self.DEPENDS7).encode(ExternalEncoding), input_name='DEPENDS7'), ))
        if self.ALLOCATEDBY is not None:
            outfile.write(' ALLOCATEDBY=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY).encode(ExternalEncoding), input_name='ALLOCATEDBY'), ))
        if self.DONEDATE is not None:
            outfile.write(' DONEDATE=%s' % (self.format_string(quote_attrib(self.DONEDATE).encode(ExternalEncoding), input_name='DONEDATE'), ))
        if self.RISK is not None:
            outfile.write(' RISK=%s' % (self.format_string(quote_attrib(self.RISK).encode(ExternalEncoding), input_name='RISK'), ))
        if self.STARTDATESTRING is not None:
            outfile.write(' STARTDATESTRING=%s' % (self.format_string(quote_attrib(self.STARTDATESTRING).encode(ExternalEncoding), input_name='STARTDATESTRING'), ))
        if self.TEXTCOLOR is not None:
            outfile.write(' TEXTCOLOR=%s' % (self.format_string(quote_attrib(self.TEXTCOLOR).encode(ExternalEncoding), input_name='TEXTCOLOR'), ))
        if self.NUMDEPENDS is not None:
            outfile.write(' NUMDEPENDS=%s' % (self.format_string(quote_attrib(self.NUMDEPENDS).encode(ExternalEncoding), input_name='NUMDEPENDS'), ))
        if self.CALCPERCENTDONE is not None:
            outfile.write(' CALCPERCENTDONE=%s' % (self.format_string(quote_attrib(self.CALCPERCENTDONE).encode(ExternalEncoding), input_name='CALCPERCENTDONE'), ))
        if self.FLAG is not None:
            outfile.write(' FLAG=%s' % (self.format_string(quote_attrib(self.FLAG).encode(ExternalEncoding), input_name='FLAG'), ))
        if self.VERSION is not None:
            outfile.write(' VERSION=%s' % (self.format_string(quote_attrib(self.VERSION).encode(ExternalEncoding), input_name='VERSION'), ))
        if self.TIMESPENT is not None:
            outfile.write(' TIMESPENT=%s' % (self.format_string(quote_attrib(self.TIMESPENT).encode(ExternalEncoding), input_name='TIMESPENT'), ))
        if self.TEXTWEBCOLOR is not None:
            outfile.write(' TEXTWEBCOLOR=%s' % (self.format_string(quote_attrib(self.TEXTWEBCOLOR).encode(ExternalEncoding), input_name='TEXTWEBCOLOR'), ))
        if self.PRIORITYCOLOR is not None:
            outfile.write(' PRIORITYCOLOR=%s' % (self.format_string(quote_attrib(self.PRIORITYCOLOR).encode(ExternalEncoding), input_name='PRIORITYCOLOR'), ))
        if self.FILEREFPATH is not None:
            outfile.write(' FILEREFPATH=%s' % (self.format_string(quote_attrib(self.FILEREFPATH).encode(ExternalEncoding), input_name='FILEREFPATH'), ))
        if self.DUEDATE is not None:
            outfile.write(' DUEDATE=%s' % (self.format_string(quote_attrib(self.DUEDATE).encode(ExternalEncoding), input_name='DUEDATE'), ))
        if self.CALCTIMEESTIMATE is not None:
            outfile.write(' CALCTIMEESTIMATE=%s' % (self.format_string(quote_attrib(self.CALCTIMEESTIMATE).encode(ExternalEncoding), input_name='CALCTIMEESTIMATE'), ))
        if self.CATEGORY is not None:
            outfile.write(' CATEGORY=%s' % (self.format_string(quote_attrib(self.CATEGORY).encode(ExternalEncoding), input_name='CATEGORY'), ))
        if self.DEPENDS6 is not None:
            outfile.write(' DEPENDS6=%s' % (self.format_string(quote_attrib(self.DEPENDS6).encode(ExternalEncoding), input_name='DEPENDS6'), ))
        if self.DEPENDS5 is not None:
            outfile.write(' DEPENDS5=%s' % (self.format_string(quote_attrib(self.DEPENDS5).encode(ExternalEncoding), input_name='DEPENDS5'), ))
        if self.DEPENDS4 is not None:
            outfile.write(' DEPENDS4=%s' % (self.format_string(quote_attrib(self.DEPENDS4).encode(ExternalEncoding), input_name='DEPENDS4'), ))
        if self.DEPENDS3 is not None:
            outfile.write(' DEPENDS3=%s' % (self.format_string(quote_attrib(self.DEPENDS3).encode(ExternalEncoding), input_name='DEPENDS3'), ))
        if self.DEPENDS2 is not None:
            outfile.write(' DEPENDS2=%s' % (self.format_string(quote_attrib(self.DEPENDS2).encode(ExternalEncoding), input_name='DEPENDS2'), ))
        if self.DEPENDS1 is not None:
            outfile.write(' DEPENDS1=%s' % (self.format_string(quote_attrib(self.DEPENDS1).encode(ExternalEncoding), input_name='DEPENDS1'), ))
        if self.CUSTOMCOMMENTS is not None:
            outfile.write(' CUSTOMCOMMENTS=%s' % (self.format_string(quote_attrib(self.CUSTOMCOMMENTS).encode(ExternalEncoding), input_name='CUSTOMCOMMENTS'), ))
        if self.TIMESPENTUNITS is not None:
            outfile.write(' TIMESPENTUNITS=%s' % (self.format_string(quote_attrib(self.TIMESPENTUNITS).encode(ExternalEncoding), input_name='TIMESPENTUNITS'), ))
        if self.COMMENTS is not None:
            outfile.write(' COMMENTS=%s' % (self.format_string(quote_attrib(self.COMMENTS).encode(ExternalEncoding), input_name='COMMENTS'), ))
        if self.DEPENDS8 is not None:
            outfile.write(' DEPENDS8=%s' % (self.format_string(quote_attrib(self.DEPENDS8).encode(ExternalEncoding), input_name='DEPENDS8'), ))
        if self.PERSON is not None:
            outfile.write(' PERSON=%s' % (self.format_string(quote_attrib(self.PERSON).encode(ExternalEncoding), input_name='PERSON'), ))
        if self.PERSON1 is not None:
            outfile.write(' PERSON1=%s' % (self.format_string(quote_attrib(self.PERSON1).encode(ExternalEncoding), input_name='PERSON1'), ))
        if self.CALCCOST is not None:
            outfile.write(' CALCCOST=%s' % (self.format_string(quote_attrib(self.CALCCOST).encode(ExternalEncoding), input_name='CALCCOST'), ))
        if self.PERSON6 is not None:
            outfile.write(' PERSON6=%s' % (self.format_string(quote_attrib(self.PERSON6).encode(ExternalEncoding), input_name='PERSON6'), ))
        if self.COMMENTSTYPE is not None:
            outfile.write(' COMMENTSTYPE=%s' % (self.format_string(quote_attrib(self.COMMENTSTYPE).encode(ExternalEncoding), input_name='COMMENTSTYPE'), ))
        if self.PERSON7 is not None:
            outfile.write(' PERSON7=%s' % (self.format_string(quote_attrib(self.PERSON7).encode(ExternalEncoding), input_name='PERSON7'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TASK'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TASK'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.CATEGORY1 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY1 = %s,\n' % (self.CATEGORY1,))
        if self.STARTDATE is not None:
            showIndent(outfile, level)
            outfile.write('STARTDATE = %s,\n' % (self.STARTDATE,))
        if self.CATEGORY3 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY3 = %s,\n' % (self.CATEGORY3,))
        if self.CATEGORY2 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY2 = %s,\n' % (self.CATEGORY2,))
        if self.CATEGORY5 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY5 = %s,\n' % (self.CATEGORY5,))
        if self.CATEGORY4 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY4 = %s,\n' % (self.CATEGORY4,))
        if self.CATEGORY7 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY7 = %s,\n' % (self.CATEGORY7,))
        if self.CATEGORY6 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY6 = %s,\n' % (self.CATEGORY6,))
        if self.CATEGORY9 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY9 = %s,\n' % (self.CATEGORY9,))
        if self.CATEGORY8 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY8 = %s,\n' % (self.CATEGORY8,))
        if self.NUMPERSON is not None:
            showIndent(outfile, level)
            outfile.write('NUMPERSON = %s,\n' % (self.NUMPERSON,))
        if self.PERSON2 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON2 = %s,\n' % (self.PERSON2,))
        if self.PERSON3 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON3 = %s,\n' % (self.PERSON3,))
        if self.COST is not None:
            showIndent(outfile, level)
            outfile.write('COST = %s,\n' % (self.COST,))
        if self.EXTERNALID is not None:
            showIndent(outfile, level)
            outfile.write('EXTERNALID = %s,\n' % (self.EXTERNALID,))
        if self.DEPENDS9 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS9 = %s,\n' % (self.DEPENDS9,))
        if self.PERSON4 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON4 = %s,\n' % (self.PERSON4,))
        if self.PERSON5 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON5 = %s,\n' % (self.PERSON5,))
        if self.DUEDATESTRING is not None:
            showIndent(outfile, level)
            outfile.write('DUEDATESTRING = %s,\n' % (self.DUEDATESTRING,))
        if self.ICONINDEX is not None:
            showIndent(outfile, level)
            outfile.write('ICONINDEX = %s,\n' % (self.ICONINDEX,))
        if self.CREATIONDATESTRING is not None:
            showIndent(outfile, level)
            outfile.write('CREATIONDATESTRING = %s,\n' % (self.CREATIONDATESTRING,))
        if self.PERSON9 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON9 = %s,\n' % (self.PERSON9,))
        if self.WEBCOLOR is not None:
            showIndent(outfile, level)
            outfile.write('WEBCOLOR = %s,\n' % (self.WEBCOLOR,))
        if self.PERSON8 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON8 = %s,\n' % (self.PERSON8,))
        if self.LASTMOD is not None:
            showIndent(outfile, level)
            outfile.write('LASTMOD = %s,\n' % (self.LASTMOD,))
        if self.TIMEESTUNITS is not None:
            showIndent(outfile, level)
            outfile.write('TIMEESTUNITS = %s,\n' % (self.TIMEESTUNITS,))
        if self.COLOR is not None:
            showIndent(outfile, level)
            outfile.write('COLOR = %s,\n' % (self.COLOR,))
        if self.TITLE is not None:
            showIndent(outfile, level)
            outfile.write('TITLE = %s,\n' % (self.TITLE,))
        if self.LASTMODSTRING is not None:
            showIndent(outfile, level)
            outfile.write('LASTMODSTRING = %s,\n' % (self.LASTMODSTRING,))
        if self.PRIORITYWEBCOLOR is not None:
            showIndent(outfile, level)
            outfile.write('PRIORITYWEBCOLOR = %s,\n' % (self.PRIORITYWEBCOLOR,))
        if self.POS is not None:
            showIndent(outfile, level)
            outfile.write('POS = %s,\n' % (self.POS,))
        if self.ID is not None:
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.PRIORITY is not None:
            showIndent(outfile, level)
            outfile.write('PRIORITY = %s,\n' % (self.PRIORITY,))
        if self.CALCTIMESPENT is not None:
            showIndent(outfile, level)
            outfile.write('CALCTIMESPENT = %s,\n' % (self.CALCTIMESPENT,))
        if self.DEPENDS is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS = %s,\n' % (self.DEPENDS,))
        if self.NUMCATEGORY is not None:
            showIndent(outfile, level)
            outfile.write('NUMCATEGORY = %s,\n' % (self.NUMCATEGORY,))
        if self.DONEDATESTRING is not None:
            showIndent(outfile, level)
            outfile.write('DONEDATESTRING = %s,\n' % (self.DONEDATESTRING,))
        if self.CREATIONDATE is not None:
            showIndent(outfile, level)
            outfile.write('CREATIONDATE = %s,\n' % (self.CREATIONDATE,))
        if self.PERCENTDONE is not None:
            showIndent(outfile, level)
            outfile.write('PERCENTDONE = %s,\n' % (self.PERCENTDONE,))
        if self.TIMEESTIMATE is not None:
            showIndent(outfile, level)
            outfile.write('TIMEESTIMATE = %s,\n' % (self.TIMEESTIMATE,))
        if self.STATUS is not None:
            showIndent(outfile, level)
            outfile.write('STATUS = %s,\n' % (self.STATUS,))
        if self.DEPENDS7 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS7 = %s,\n' % (self.DEPENDS7,))
        if self.ALLOCATEDBY is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY = %s,\n' % (self.ALLOCATEDBY,))
        if self.DONEDATE is not None:
            showIndent(outfile, level)
            outfile.write('DONEDATE = %s,\n' % (self.DONEDATE,))
        if self.RISK is not None:
            showIndent(outfile, level)
            outfile.write('RISK = %s,\n' % (self.RISK,))
        if self.STARTDATESTRING is not None:
            showIndent(outfile, level)
            outfile.write('STARTDATESTRING = %s,\n' % (self.STARTDATESTRING,))
        if self.TEXTCOLOR is not None:
            showIndent(outfile, level)
            outfile.write('TEXTCOLOR = %s,\n' % (self.TEXTCOLOR,))
        if self.NUMDEPENDS is not None:
            showIndent(outfile, level)
            outfile.write('NUMDEPENDS = %s,\n' % (self.NUMDEPENDS,))
        if self.CALCPERCENTDONE is not None:
            showIndent(outfile, level)
            outfile.write('CALCPERCENTDONE = %s,\n' % (self.CALCPERCENTDONE,))
        if self.FLAG is not None:
            showIndent(outfile, level)
            outfile.write('FLAG = %s,\n' % (self.FLAG,))
        if self.VERSION is not None:
            showIndent(outfile, level)
            outfile.write('VERSION = %s,\n' % (self.VERSION,))
        if self.TIMESPENT is not None:
            showIndent(outfile, level)
            outfile.write('TIMESPENT = %s,\n' % (self.TIMESPENT,))
        if self.TEXTWEBCOLOR is not None:
            showIndent(outfile, level)
            outfile.write('TEXTWEBCOLOR = %s,\n' % (self.TEXTWEBCOLOR,))
        if self.PRIORITYCOLOR is not None:
            showIndent(outfile, level)
            outfile.write('PRIORITYCOLOR = %s,\n' % (self.PRIORITYCOLOR,))
        if self.FILEREFPATH is not None:
            showIndent(outfile, level)
            outfile.write('FILEREFPATH = %s,\n' % (self.FILEREFPATH,))
        if self.DUEDATE is not None:
            showIndent(outfile, level)
            outfile.write('DUEDATE = %s,\n' % (self.DUEDATE,))
        if self.CALCTIMEESTIMATE is not None:
            showIndent(outfile, level)
            outfile.write('CALCTIMEESTIMATE = %s,\n' % (self.CALCTIMEESTIMATE,))
        if self.CATEGORY is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY = %s,\n' % (self.CATEGORY,))
        if self.DEPENDS6 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS6 = %s,\n' % (self.DEPENDS6,))
        if self.DEPENDS5 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS5 = %s,\n' % (self.DEPENDS5,))
        if self.DEPENDS4 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS4 = %s,\n' % (self.DEPENDS4,))
        if self.DEPENDS3 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS3 = %s,\n' % (self.DEPENDS3,))
        if self.DEPENDS2 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS2 = %s,\n' % (self.DEPENDS2,))
        if self.DEPENDS1 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS1 = %s,\n' % (self.DEPENDS1,))
        if self.CUSTOMCOMMENTS is not None:
            showIndent(outfile, level)
            outfile.write('CUSTOMCOMMENTS = %s,\n' % (self.CUSTOMCOMMENTS,))
        if self.TIMESPENTUNITS is not None:
            showIndent(outfile, level)
            outfile.write('TIMESPENTUNITS = %s,\n' % (self.TIMESPENTUNITS,))
        if self.COMMENTS is not None:
            showIndent(outfile, level)
            outfile.write('COMMENTS = %s,\n' % (self.COMMENTS,))
        if self.DEPENDS8 is not None:
            showIndent(outfile, level)
            outfile.write('DEPENDS8 = %s,\n' % (self.DEPENDS8,))
        if self.PERSON is not None:
            showIndent(outfile, level)
            outfile.write('PERSON = %s,\n' % (self.PERSON,))
        if self.PERSON1 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON1 = %s,\n' % (self.PERSON1,))
        if self.CALCCOST is not None:
            showIndent(outfile, level)
            outfile.write('CALCCOST = %s,\n' % (self.CALCCOST,))
        if self.PERSON6 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON6 = %s,\n' % (self.PERSON6,))
        if self.COMMENTSTYPE is not None:
            showIndent(outfile, level)
            outfile.write('COMMENTSTYPE = %s,\n' % (self.COMMENTSTYPE,))
        if self.PERSON7 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON7 = %s,\n' % (self.PERSON7,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('CATEGORY1'):
            self.CATEGORY1 = attrs.get('CATEGORY1').value
        if attrs.get('STARTDATE'):
            self.STARTDATE = attrs.get('STARTDATE').value
        if attrs.get('CATEGORY3'):
            self.CATEGORY3 = attrs.get('CATEGORY3').value
        if attrs.get('CATEGORY2'):
            self.CATEGORY2 = attrs.get('CATEGORY2').value
        if attrs.get('CATEGORY5'):
            self.CATEGORY5 = attrs.get('CATEGORY5').value
        if attrs.get('CATEGORY4'):
            self.CATEGORY4 = attrs.get('CATEGORY4').value
        if attrs.get('CATEGORY7'):
            self.CATEGORY7 = attrs.get('CATEGORY7').value
        if attrs.get('CATEGORY6'):
            self.CATEGORY6 = attrs.get('CATEGORY6').value
        if attrs.get('CATEGORY9'):
            self.CATEGORY9 = attrs.get('CATEGORY9').value
        if attrs.get('CATEGORY8'):
            self.CATEGORY8 = attrs.get('CATEGORY8').value
        if attrs.get('NUMPERSON'):
            self.NUMPERSON = attrs.get('NUMPERSON').value
        if attrs.get('PERSON2'):
            self.PERSON2 = attrs.get('PERSON2').value
        if attrs.get('PERSON3'):
            self.PERSON3 = attrs.get('PERSON3').value
        if attrs.get('COST'):
            self.COST = attrs.get('COST').value
        if attrs.get('EXTERNALID'):
            self.EXTERNALID = attrs.get('EXTERNALID').value
        if attrs.get('DEPENDS9'):
            self.DEPENDS9 = attrs.get('DEPENDS9').value
        if attrs.get('PERSON4'):
            self.PERSON4 = attrs.get('PERSON4').value
        if attrs.get('PERSON5'):
            self.PERSON5 = attrs.get('PERSON5').value
        if attrs.get('DUEDATESTRING'):
            self.DUEDATESTRING = attrs.get('DUEDATESTRING').value
        if attrs.get('ICONINDEX'):
            self.ICONINDEX = attrs.get('ICONINDEX').value
        if attrs.get('CREATIONDATESTRING'):
            self.CREATIONDATESTRING = attrs.get('CREATIONDATESTRING').value
        if attrs.get('PERSON9'):
            self.PERSON9 = attrs.get('PERSON9').value
        if attrs.get('WEBCOLOR'):
            self.WEBCOLOR = attrs.get('WEBCOLOR').value
        if attrs.get('PERSON8'):
            self.PERSON8 = attrs.get('PERSON8').value
        if attrs.get('LASTMOD'):
            self.LASTMOD = attrs.get('LASTMOD').value
        if attrs.get('TIMEESTUNITS'):
            self.TIMEESTUNITS = attrs.get('TIMEESTUNITS').value
        if attrs.get('COLOR'):
            self.COLOR = attrs.get('COLOR').value
        if attrs.get('TITLE'):
            self.TITLE = attrs.get('TITLE').value
        if attrs.get('LASTMODSTRING'):
            self.LASTMODSTRING = attrs.get('LASTMODSTRING').value
        if attrs.get('PRIORITYWEBCOLOR'):
            self.PRIORITYWEBCOLOR = attrs.get('PRIORITYWEBCOLOR').value
        if attrs.get('POS'):
            self.POS = attrs.get('POS').value
        if attrs.get('ID'):
            self.ID = attrs.get('ID').value
        if attrs.get('PRIORITY'):
            self.PRIORITY = attrs.get('PRIORITY').value
        if attrs.get('CALCTIMESPENT'):
            self.CALCTIMESPENT = attrs.get('CALCTIMESPENT').value
        if attrs.get('DEPENDS'):
            self.DEPENDS = attrs.get('DEPENDS').value
        if attrs.get('NUMCATEGORY'):
            self.NUMCATEGORY = attrs.get('NUMCATEGORY').value
        if attrs.get('DONEDATESTRING'):
            self.DONEDATESTRING = attrs.get('DONEDATESTRING').value
        if attrs.get('CREATIONDATE'):
            self.CREATIONDATE = attrs.get('CREATIONDATE').value
        if attrs.get('PERCENTDONE'):
            self.PERCENTDONE = attrs.get('PERCENTDONE').value
        if attrs.get('TIMEESTIMATE'):
            self.TIMEESTIMATE = attrs.get('TIMEESTIMATE').value
        if attrs.get('STATUS'):
            self.STATUS = attrs.get('STATUS').value
        if attrs.get('DEPENDS7'):
            self.DEPENDS7 = attrs.get('DEPENDS7').value
        if attrs.get('ALLOCATEDBY'):
            self.ALLOCATEDBY = attrs.get('ALLOCATEDBY').value
        if attrs.get('DONEDATE'):
            self.DONEDATE = attrs.get('DONEDATE').value
        if attrs.get('RISK'):
            self.RISK = attrs.get('RISK').value
        if attrs.get('STARTDATESTRING'):
            self.STARTDATESTRING = attrs.get('STARTDATESTRING').value
        if attrs.get('TEXTCOLOR'):
            self.TEXTCOLOR = attrs.get('TEXTCOLOR').value
        if attrs.get('NUMDEPENDS'):
            self.NUMDEPENDS = attrs.get('NUMDEPENDS').value
        if attrs.get('CALCPERCENTDONE'):
            self.CALCPERCENTDONE = attrs.get('CALCPERCENTDONE').value
        if attrs.get('FLAG'):
            self.FLAG = attrs.get('FLAG').value
        if attrs.get('VERSION'):
            self.VERSION = attrs.get('VERSION').value
        if attrs.get('TIMESPENT'):
            self.TIMESPENT = attrs.get('TIMESPENT').value
        if attrs.get('TEXTWEBCOLOR'):
            self.TEXTWEBCOLOR = attrs.get('TEXTWEBCOLOR').value
        if attrs.get('PRIORITYCOLOR'):
            self.PRIORITYCOLOR = attrs.get('PRIORITYCOLOR').value
        if attrs.get('FILEREFPATH'):
            self.FILEREFPATH = attrs.get('FILEREFPATH').value
        if attrs.get('DUEDATE'):
            self.DUEDATE = attrs.get('DUEDATE').value
        if attrs.get('CALCTIMEESTIMATE'):
            self.CALCTIMEESTIMATE = attrs.get('CALCTIMEESTIMATE').value
        if attrs.get('CATEGORY'):
            self.CATEGORY = attrs.get('CATEGORY').value
        if attrs.get('DEPENDS6'):
            self.DEPENDS6 = attrs.get('DEPENDS6').value
        if attrs.get('DEPENDS5'):
            self.DEPENDS5 = attrs.get('DEPENDS5').value
        if attrs.get('DEPENDS4'):
            self.DEPENDS4 = attrs.get('DEPENDS4').value
        if attrs.get('DEPENDS3'):
            self.DEPENDS3 = attrs.get('DEPENDS3').value
        if attrs.get('DEPENDS2'):
            self.DEPENDS2 = attrs.get('DEPENDS2').value
        if attrs.get('DEPENDS1'):
            self.DEPENDS1 = attrs.get('DEPENDS1').value
        if attrs.get('CUSTOMCOMMENTS'):
            self.CUSTOMCOMMENTS = attrs.get('CUSTOMCOMMENTS').value
        if attrs.get('TIMESPENTUNITS'):
            self.TIMESPENTUNITS = attrs.get('TIMESPENTUNITS').value
        if attrs.get('COMMENTS'):
            self.COMMENTS = attrs.get('COMMENTS').value
        if attrs.get('DEPENDS8'):
            self.DEPENDS8 = attrs.get('DEPENDS8').value
        if attrs.get('PERSON'):
            self.PERSON = attrs.get('PERSON').value
        if attrs.get('PERSON1'):
            self.PERSON1 = attrs.get('PERSON1').value
        if attrs.get('CALCCOST'):
            self.CALCCOST = attrs.get('CALCCOST').value
        if attrs.get('PERSON6'):
            self.PERSON6 = attrs.get('PERSON6').value
        if attrs.get('COMMENTSTYPE'):
            self.COMMENTSTYPE = attrs.get('COMMENTSTYPE').value
        if attrs.get('PERSON7'):
            self.PERSON7 = attrs.get('PERSON7').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
    def walk_and_update(self):
        members = TASK._member_data_items
        for member in members:
            obj1 = getattr(self, member.get_name())
            if member.get_data_type() == 'xs:date':
                newvalue = date_calcs.date_from_string(obj1)
                setattr(self, member.get_name(), newvalue)
            elif member.get_container():
                for child in obj1:
                    if type(child) == types.InstanceType:
                        child.walk_and_update()
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_update()
        if TASK.superclass != None:
          TASK.superclass.walk_and_update(self)
    def walk_and_show(self, depth):
        global counter
        counter += 1
        depth += 1
        print '%d. class: TASK  depth: %d' % (counter, depth, )
        members = TASK._member_data_items
        for member in members:
            s1 = member.get_name()
            s2 = member.get_data_type()
            s3 = '%d' % member.get_container()
            obj1 = getattr(self, member.get_name())
            if member.get_container():
                s4 = '<container>'
            else:
                if type(obj1) != types.InstanceType:
                    s4 = '%s' % obj1
                else:
                    s4 = '<instance>'
            s5 = '%s%s%s  %s' % (s1.ljust(16), s2.ljust(16), s3.rjust(4), s4, )
            print '   ', s5
        for member in members:
            if member.get_container():
                for child in getattr(self, member.get_name()):
                    if type(child) == types.InstanceType:
                        child.walk_and_show(depth)
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_show(depth)
# end class TASK


class CATEGORY(GeneratedsSuper):
    _member_data_items = [
        _MemberSpec('CATEGORY1', 'xs:string', 0),
        _MemberSpec('CATEGORY0', 'xs:string', 0),
        _MemberSpec('CATEGORY3', 'xs:string', 0),
        _MemberSpec('CATEGORY2', 'xs:string', 0),
        _MemberSpec('CATEGORY5', 'xs:string', 0),
        _MemberSpec('CATEGORY4', 'xs:string', 0),
        _MemberSpec('CATEGORY7', 'xs:string', 0),
        _MemberSpec('CATEGORY6', 'xs:string', 0),
        _MemberSpec('CATEGORY9', 'xs:string', 0),
        _MemberSpec('CATEGORY8', 'xs:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, CATEGORY1=None, CATEGORY0=None, CATEGORY3=None, CATEGORY2=None, CATEGORY5=None, CATEGORY4=None, CATEGORY7=None, CATEGORY6=None, CATEGORY9=None, CATEGORY8=None, valueOf_=''):
        self.CATEGORY1 = _cast(None, CATEGORY1)
        self.CATEGORY0 = _cast(None, CATEGORY0)
        self.CATEGORY3 = _cast(None, CATEGORY3)
        self.CATEGORY2 = _cast(None, CATEGORY2)
        self.CATEGORY5 = _cast(None, CATEGORY5)
        self.CATEGORY4 = _cast(None, CATEGORY4)
        self.CATEGORY7 = _cast(None, CATEGORY7)
        self.CATEGORY6 = _cast(None, CATEGORY6)
        self.CATEGORY9 = _cast(None, CATEGORY9)
        self.CATEGORY8 = _cast(None, CATEGORY8)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CATEGORY.subclass:
            return CATEGORY.subclass(*args_, **kwargs_)
        else:
            return CATEGORY(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CATEGORY1(self): return self.CATEGORY1
    def set_CATEGORY1(self, CATEGORY1): self.CATEGORY1 = CATEGORY1
    def get_CATEGORY0(self): return self.CATEGORY0
    def set_CATEGORY0(self, CATEGORY0): self.CATEGORY0 = CATEGORY0
    def get_CATEGORY3(self): return self.CATEGORY3
    def set_CATEGORY3(self, CATEGORY3): self.CATEGORY3 = CATEGORY3
    def get_CATEGORY2(self): return self.CATEGORY2
    def set_CATEGORY2(self, CATEGORY2): self.CATEGORY2 = CATEGORY2
    def get_CATEGORY5(self): return self.CATEGORY5
    def set_CATEGORY5(self, CATEGORY5): self.CATEGORY5 = CATEGORY5
    def get_CATEGORY4(self): return self.CATEGORY4
    def set_CATEGORY4(self, CATEGORY4): self.CATEGORY4 = CATEGORY4
    def get_CATEGORY7(self): return self.CATEGORY7
    def set_CATEGORY7(self, CATEGORY7): self.CATEGORY7 = CATEGORY7
    def get_CATEGORY6(self): return self.CATEGORY6
    def set_CATEGORY6(self, CATEGORY6): self.CATEGORY6 = CATEGORY6
    def get_CATEGORY9(self): return self.CATEGORY9
    def set_CATEGORY9(self, CATEGORY9): self.CATEGORY9 = CATEGORY9
    def get_CATEGORY8(self): return self.CATEGORY8
    def set_CATEGORY8(self, CATEGORY8): self.CATEGORY8 = CATEGORY8
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='CATEGORY', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='CATEGORY')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='CATEGORY'):
        if self.CATEGORY1 is not None:
            outfile.write(' CATEGORY1=%s' % (self.format_string(quote_attrib(self.CATEGORY1).encode(ExternalEncoding), input_name='CATEGORY1'), ))
        outfile.write(' CATEGORY0=%s' % (self.format_string(quote_attrib(self.CATEGORY0).encode(ExternalEncoding), input_name='CATEGORY0'), ))
        if self.CATEGORY3 is not None:
            outfile.write(' CATEGORY3=%s' % (self.format_string(quote_attrib(self.CATEGORY3).encode(ExternalEncoding), input_name='CATEGORY3'), ))
        if self.CATEGORY2 is not None:
            outfile.write(' CATEGORY2=%s' % (self.format_string(quote_attrib(self.CATEGORY2).encode(ExternalEncoding), input_name='CATEGORY2'), ))
        if self.CATEGORY5 is not None:
            outfile.write(' CATEGORY5=%s' % (self.format_string(quote_attrib(self.CATEGORY5).encode(ExternalEncoding), input_name='CATEGORY5'), ))
        if self.CATEGORY4 is not None:
            outfile.write(' CATEGORY4=%s' % (self.format_string(quote_attrib(self.CATEGORY4).encode(ExternalEncoding), input_name='CATEGORY4'), ))
        if self.CATEGORY7 is not None:
            outfile.write(' CATEGORY7=%s' % (self.format_string(quote_attrib(self.CATEGORY7).encode(ExternalEncoding), input_name='CATEGORY7'), ))
        if self.CATEGORY6 is not None:
            outfile.write(' CATEGORY6=%s' % (self.format_string(quote_attrib(self.CATEGORY6).encode(ExternalEncoding), input_name='CATEGORY6'), ))
        if self.CATEGORY9 is not None:
            outfile.write(' CATEGORY9=%s' % (self.format_string(quote_attrib(self.CATEGORY9).encode(ExternalEncoding), input_name='CATEGORY9'), ))
        if self.CATEGORY8 is not None:
            outfile.write(' CATEGORY8=%s' % (self.format_string(quote_attrib(self.CATEGORY8).encode(ExternalEncoding), input_name='CATEGORY8'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CATEGORY'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CATEGORY'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.CATEGORY1 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY1 = %s,\n' % (self.CATEGORY1,))
        if self.CATEGORY0 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY0 = %s,\n' % (self.CATEGORY0,))
        if self.CATEGORY3 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY3 = %s,\n' % (self.CATEGORY3,))
        if self.CATEGORY2 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY2 = %s,\n' % (self.CATEGORY2,))
        if self.CATEGORY5 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY5 = %s,\n' % (self.CATEGORY5,))
        if self.CATEGORY4 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY4 = %s,\n' % (self.CATEGORY4,))
        if self.CATEGORY7 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY7 = %s,\n' % (self.CATEGORY7,))
        if self.CATEGORY6 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY6 = %s,\n' % (self.CATEGORY6,))
        if self.CATEGORY9 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY9 = %s,\n' % (self.CATEGORY9,))
        if self.CATEGORY8 is not None:
            showIndent(outfile, level)
            outfile.write('CATEGORY8 = %s,\n' % (self.CATEGORY8,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('CATEGORY1'):
            self.CATEGORY1 = attrs.get('CATEGORY1').value
        if attrs.get('CATEGORY0'):
            self.CATEGORY0 = attrs.get('CATEGORY0').value
        if attrs.get('CATEGORY3'):
            self.CATEGORY3 = attrs.get('CATEGORY3').value
        if attrs.get('CATEGORY2'):
            self.CATEGORY2 = attrs.get('CATEGORY2').value
        if attrs.get('CATEGORY5'):
            self.CATEGORY5 = attrs.get('CATEGORY5').value
        if attrs.get('CATEGORY4'):
            self.CATEGORY4 = attrs.get('CATEGORY4').value
        if attrs.get('CATEGORY7'):
            self.CATEGORY7 = attrs.get('CATEGORY7').value
        if attrs.get('CATEGORY6'):
            self.CATEGORY6 = attrs.get('CATEGORY6').value
        if attrs.get('CATEGORY9'):
            self.CATEGORY9 = attrs.get('CATEGORY9').value
        if attrs.get('CATEGORY8'):
            self.CATEGORY8 = attrs.get('CATEGORY8').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
    def walk_and_update(self):
        members = CATEGORY._member_data_items
        for member in members:
            obj1 = getattr(self, member.get_name())
            if member.get_data_type() == 'xs:date':
                newvalue = date_calcs.date_from_string(obj1)
                setattr(self, member.get_name(), newvalue)
            elif member.get_container():
                for child in obj1:
                    if type(child) == types.InstanceType:
                        child.walk_and_update()
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_update()
        if CATEGORY.superclass != None:
          CATEGORY.superclass.walk_and_update(self)
    def walk_and_show(self, depth):
        global counter
        counter += 1
        depth += 1
        print '%d. class: CATEGORY  depth: %d' % (counter, depth, )
        members = CATEGORY._member_data_items
        for member in members:
            s1 = member.get_name()
            s2 = member.get_data_type()
            s3 = '%d' % member.get_container()
            obj1 = getattr(self, member.get_name())
            if member.get_container():
                s4 = '<container>'
            else:
                if type(obj1) != types.InstanceType:
                    s4 = '%s' % obj1
                else:
                    s4 = '<instance>'
            s5 = '%s%s%s  %s' % (s1.ljust(16), s2.ljust(16), s3.rjust(4), s4, )
            print '   ', s5
        for member in members:
            if member.get_container():
                for child in getattr(self, member.get_name()):
                    if type(child) == types.InstanceType:
                        child.walk_and_show(depth)
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_show(depth)
# end class CATEGORY


class STATUS(GeneratedsSuper):
    _member_data_items = [
        _MemberSpec('STATUS5', 'xs:string', 0),
        _MemberSpec('STATUS4', 'xs:string', 0),
        _MemberSpec('STATUS7', 'xs:string', 0),
        _MemberSpec('STATUS6', 'xs:string', 0),
        _MemberSpec('STATUS1', 'xs:string', 0),
        _MemberSpec('STATUS0', 'xs:string', 0),
        _MemberSpec('STATUS3', 'xs:string', 0),
        _MemberSpec('STATUS2', 'xs:string', 0),
        _MemberSpec('STATUS9', 'xs:string', 0),
        _MemberSpec('STATUS8', 'xs:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, STATUS5=None, STATUS4=None, STATUS7=None, STATUS6=None, STATUS1=None, STATUS0=None, STATUS3=None, STATUS2=None, STATUS9=None, STATUS8=None, valueOf_=''):
        self.STATUS5 = _cast(None, STATUS5)
        self.STATUS4 = _cast(None, STATUS4)
        self.STATUS7 = _cast(None, STATUS7)
        self.STATUS6 = _cast(None, STATUS6)
        self.STATUS1 = _cast(None, STATUS1)
        self.STATUS0 = _cast(None, STATUS0)
        self.STATUS3 = _cast(None, STATUS3)
        self.STATUS2 = _cast(None, STATUS2)
        self.STATUS9 = _cast(None, STATUS9)
        self.STATUS8 = _cast(None, STATUS8)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if STATUS.subclass:
            return STATUS.subclass(*args_, **kwargs_)
        else:
            return STATUS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_STATUS5(self): return self.STATUS5
    def set_STATUS5(self, STATUS5): self.STATUS5 = STATUS5
    def get_STATUS4(self): return self.STATUS4
    def set_STATUS4(self, STATUS4): self.STATUS4 = STATUS4
    def get_STATUS7(self): return self.STATUS7
    def set_STATUS7(self, STATUS7): self.STATUS7 = STATUS7
    def get_STATUS6(self): return self.STATUS6
    def set_STATUS6(self, STATUS6): self.STATUS6 = STATUS6
    def get_STATUS1(self): return self.STATUS1
    def set_STATUS1(self, STATUS1): self.STATUS1 = STATUS1
    def get_STATUS0(self): return self.STATUS0
    def set_STATUS0(self, STATUS0): self.STATUS0 = STATUS0
    def get_STATUS3(self): return self.STATUS3
    def set_STATUS3(self, STATUS3): self.STATUS3 = STATUS3
    def get_STATUS2(self): return self.STATUS2
    def set_STATUS2(self, STATUS2): self.STATUS2 = STATUS2
    def get_STATUS9(self): return self.STATUS9
    def set_STATUS9(self, STATUS9): self.STATUS9 = STATUS9
    def get_STATUS8(self): return self.STATUS8
    def set_STATUS8(self, STATUS8): self.STATUS8 = STATUS8
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='STATUS', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='STATUS')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='STATUS'):
        if self.STATUS5 is not None:
            outfile.write(' STATUS5=%s' % (self.format_string(quote_attrib(self.STATUS5).encode(ExternalEncoding), input_name='STATUS5'), ))
        if self.STATUS4 is not None:
            outfile.write(' STATUS4=%s' % (self.format_string(quote_attrib(self.STATUS4).encode(ExternalEncoding), input_name='STATUS4'), ))
        if self.STATUS7 is not None:
            outfile.write(' STATUS7=%s' % (self.format_string(quote_attrib(self.STATUS7).encode(ExternalEncoding), input_name='STATUS7'), ))
        if self.STATUS6 is not None:
            outfile.write(' STATUS6=%s' % (self.format_string(quote_attrib(self.STATUS6).encode(ExternalEncoding), input_name='STATUS6'), ))
        if self.STATUS1 is not None:
            outfile.write(' STATUS1=%s' % (self.format_string(quote_attrib(self.STATUS1).encode(ExternalEncoding), input_name='STATUS1'), ))
        outfile.write(' STATUS0=%s' % (self.format_string(quote_attrib(self.STATUS0).encode(ExternalEncoding), input_name='STATUS0'), ))
        if self.STATUS3 is not None:
            outfile.write(' STATUS3=%s' % (self.format_string(quote_attrib(self.STATUS3).encode(ExternalEncoding), input_name='STATUS3'), ))
        if self.STATUS2 is not None:
            outfile.write(' STATUS2=%s' % (self.format_string(quote_attrib(self.STATUS2).encode(ExternalEncoding), input_name='STATUS2'), ))
        if self.STATUS9 is not None:
            outfile.write(' STATUS9=%s' % (self.format_string(quote_attrib(self.STATUS9).encode(ExternalEncoding), input_name='STATUS9'), ))
        if self.STATUS8 is not None:
            outfile.write(' STATUS8=%s' % (self.format_string(quote_attrib(self.STATUS8).encode(ExternalEncoding), input_name='STATUS8'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='STATUS'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='STATUS'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.STATUS5 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS5 = %s,\n' % (self.STATUS5,))
        if self.STATUS4 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS4 = %s,\n' % (self.STATUS4,))
        if self.STATUS7 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS7 = %s,\n' % (self.STATUS7,))
        if self.STATUS6 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS6 = %s,\n' % (self.STATUS6,))
        if self.STATUS1 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS1 = %s,\n' % (self.STATUS1,))
        if self.STATUS0 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS0 = %s,\n' % (self.STATUS0,))
        if self.STATUS3 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS3 = %s,\n' % (self.STATUS3,))
        if self.STATUS2 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS2 = %s,\n' % (self.STATUS2,))
        if self.STATUS9 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS9 = %s,\n' % (self.STATUS9,))
        if self.STATUS8 is not None:
            showIndent(outfile, level)
            outfile.write('STATUS8 = %s,\n' % (self.STATUS8,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('STATUS5'):
            self.STATUS5 = attrs.get('STATUS5').value
        if attrs.get('STATUS4'):
            self.STATUS4 = attrs.get('STATUS4').value
        if attrs.get('STATUS7'):
            self.STATUS7 = attrs.get('STATUS7').value
        if attrs.get('STATUS6'):
            self.STATUS6 = attrs.get('STATUS6').value
        if attrs.get('STATUS1'):
            self.STATUS1 = attrs.get('STATUS1').value
        if attrs.get('STATUS0'):
            self.STATUS0 = attrs.get('STATUS0').value
        if attrs.get('STATUS3'):
            self.STATUS3 = attrs.get('STATUS3').value
        if attrs.get('STATUS2'):
            self.STATUS2 = attrs.get('STATUS2').value
        if attrs.get('STATUS9'):
            self.STATUS9 = attrs.get('STATUS9').value
        if attrs.get('STATUS8'):
            self.STATUS8 = attrs.get('STATUS8').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
    def walk_and_update(self):
        members = STATUS._member_data_items
        for member in members:
            obj1 = getattr(self, member.get_name())
            if member.get_data_type() == 'xs:date':
                newvalue = date_calcs.date_from_string(obj1)
                setattr(self, member.get_name(), newvalue)
            elif member.get_container():
                for child in obj1:
                    if type(child) == types.InstanceType:
                        child.walk_and_update()
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_update()
        if STATUS.superclass != None:
          STATUS.superclass.walk_and_update(self)
    def walk_and_show(self, depth):
        global counter
        counter += 1
        depth += 1
        print '%d. class: STATUS  depth: %d' % (counter, depth, )
        members = STATUS._member_data_items
        for member in members:
            s1 = member.get_name()
            s2 = member.get_data_type()
            s3 = '%d' % member.get_container()
            obj1 = getattr(self, member.get_name())
            if member.get_container():
                s4 = '<container>'
            else:
                if type(obj1) != types.InstanceType:
                    s4 = '%s' % obj1
                else:
                    s4 = '<instance>'
            s5 = '%s%s%s  %s' % (s1.ljust(16), s2.ljust(16), s3.rjust(4), s4, )
            print '   ', s5
        for member in members:
            if member.get_container():
                for child in getattr(self, member.get_name()):
                    if type(child) == types.InstanceType:
                        child.walk_and_show(depth)
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_show(depth)
# end class STATUS


class PERSON(GeneratedsSuper):
    _member_data_items = [
        _MemberSpec('PERSON2', 'xs:string', 0),
        _MemberSpec('PERSON3', 'xs:string', 0),
        _MemberSpec('PERSON0', 'xs:string', 0),
        _MemberSpec('PERSON1', 'xs:string', 0),
        _MemberSpec('PERSON6', 'xs:string', 0),
        _MemberSpec('PERSON7', 'xs:string', 0),
        _MemberSpec('PERSON4', 'xs:string', 0),
        _MemberSpec('PERSON5', 'xs:string', 0),
        _MemberSpec('PERSON8', 'xs:string', 0),
        _MemberSpec('PERSON9', 'xs:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, PERSON2=None, PERSON3=None, PERSON0=None, PERSON1=None, PERSON6=None, PERSON7=None, PERSON4=None, PERSON5=None, PERSON8=None, PERSON9=None, valueOf_=''):
        self.PERSON2 = _cast(None, PERSON2)
        self.PERSON3 = _cast(None, PERSON3)
        self.PERSON0 = _cast(None, PERSON0)
        self.PERSON1 = _cast(None, PERSON1)
        self.PERSON6 = _cast(None, PERSON6)
        self.PERSON7 = _cast(None, PERSON7)
        self.PERSON4 = _cast(None, PERSON4)
        self.PERSON5 = _cast(None, PERSON5)
        self.PERSON8 = _cast(None, PERSON8)
        self.PERSON9 = _cast(None, PERSON9)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if PERSON.subclass:
            return PERSON.subclass(*args_, **kwargs_)
        else:
            return PERSON(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PERSON2(self): return self.PERSON2
    def set_PERSON2(self, PERSON2): self.PERSON2 = PERSON2
    def get_PERSON3(self): return self.PERSON3
    def set_PERSON3(self, PERSON3): self.PERSON3 = PERSON3
    def get_PERSON0(self): return self.PERSON0
    def set_PERSON0(self, PERSON0): self.PERSON0 = PERSON0
    def get_PERSON1(self): return self.PERSON1
    def set_PERSON1(self, PERSON1): self.PERSON1 = PERSON1
    def get_PERSON6(self): return self.PERSON6
    def set_PERSON6(self, PERSON6): self.PERSON6 = PERSON6
    def get_PERSON7(self): return self.PERSON7
    def set_PERSON7(self, PERSON7): self.PERSON7 = PERSON7
    def get_PERSON4(self): return self.PERSON4
    def set_PERSON4(self, PERSON4): self.PERSON4 = PERSON4
    def get_PERSON5(self): return self.PERSON5
    def set_PERSON5(self, PERSON5): self.PERSON5 = PERSON5
    def get_PERSON8(self): return self.PERSON8
    def set_PERSON8(self, PERSON8): self.PERSON8 = PERSON8
    def get_PERSON9(self): return self.PERSON9
    def set_PERSON9(self, PERSON9): self.PERSON9 = PERSON9
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='PERSON', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='PERSON')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='PERSON'):
        if self.PERSON2 is not None:
            outfile.write(' PERSON2=%s' % (self.format_string(quote_attrib(self.PERSON2).encode(ExternalEncoding), input_name='PERSON2'), ))
        if self.PERSON3 is not None:
            outfile.write(' PERSON3=%s' % (self.format_string(quote_attrib(self.PERSON3).encode(ExternalEncoding), input_name='PERSON3'), ))
        outfile.write(' PERSON0=%s' % (self.format_string(quote_attrib(self.PERSON0).encode(ExternalEncoding), input_name='PERSON0'), ))
        if self.PERSON1 is not None:
            outfile.write(' PERSON1=%s' % (self.format_string(quote_attrib(self.PERSON1).encode(ExternalEncoding), input_name='PERSON1'), ))
        if self.PERSON6 is not None:
            outfile.write(' PERSON6=%s' % (self.format_string(quote_attrib(self.PERSON6).encode(ExternalEncoding), input_name='PERSON6'), ))
        if self.PERSON7 is not None:
            outfile.write(' PERSON7=%s' % (self.format_string(quote_attrib(self.PERSON7).encode(ExternalEncoding), input_name='PERSON7'), ))
        if self.PERSON4 is not None:
            outfile.write(' PERSON4=%s' % (self.format_string(quote_attrib(self.PERSON4).encode(ExternalEncoding), input_name='PERSON4'), ))
        if self.PERSON5 is not None:
            outfile.write(' PERSON5=%s' % (self.format_string(quote_attrib(self.PERSON5).encode(ExternalEncoding), input_name='PERSON5'), ))
        if self.PERSON8 is not None:
            outfile.write(' PERSON8=%s' % (self.format_string(quote_attrib(self.PERSON8).encode(ExternalEncoding), input_name='PERSON8'), ))
        if self.PERSON9 is not None:
            outfile.write(' PERSON9=%s' % (self.format_string(quote_attrib(self.PERSON9).encode(ExternalEncoding), input_name='PERSON9'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PERSON'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PERSON'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.PERSON2 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON2 = %s,\n' % (self.PERSON2,))
        if self.PERSON3 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON3 = %s,\n' % (self.PERSON3,))
        if self.PERSON0 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON0 = %s,\n' % (self.PERSON0,))
        if self.PERSON1 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON1 = %s,\n' % (self.PERSON1,))
        if self.PERSON6 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON6 = %s,\n' % (self.PERSON6,))
        if self.PERSON7 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON7 = %s,\n' % (self.PERSON7,))
        if self.PERSON4 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON4 = %s,\n' % (self.PERSON4,))
        if self.PERSON5 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON5 = %s,\n' % (self.PERSON5,))
        if self.PERSON8 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON8 = %s,\n' % (self.PERSON8,))
        if self.PERSON9 is not None:
            showIndent(outfile, level)
            outfile.write('PERSON9 = %s,\n' % (self.PERSON9,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('PERSON2'):
            self.PERSON2 = attrs.get('PERSON2').value
        if attrs.get('PERSON3'):
            self.PERSON3 = attrs.get('PERSON3').value
        if attrs.get('PERSON0'):
            self.PERSON0 = attrs.get('PERSON0').value
        if attrs.get('PERSON1'):
            self.PERSON1 = attrs.get('PERSON1').value
        if attrs.get('PERSON6'):
            self.PERSON6 = attrs.get('PERSON6').value
        if attrs.get('PERSON7'):
            self.PERSON7 = attrs.get('PERSON7').value
        if attrs.get('PERSON4'):
            self.PERSON4 = attrs.get('PERSON4').value
        if attrs.get('PERSON5'):
            self.PERSON5 = attrs.get('PERSON5').value
        if attrs.get('PERSON8'):
            self.PERSON8 = attrs.get('PERSON8').value
        if attrs.get('PERSON9'):
            self.PERSON9 = attrs.get('PERSON9').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
    def walk_and_update(self):
        members = PERSON._member_data_items
        for member in members:
            obj1 = getattr(self, member.get_name())
            if member.get_data_type() == 'xs:date':
                newvalue = date_calcs.date_from_string(obj1)
                setattr(self, member.get_name(), newvalue)
            elif member.get_container():
                for child in obj1:
                    if type(child) == types.InstanceType:
                        child.walk_and_update()
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_update()
        if PERSON.superclass != None:
          PERSON.superclass.walk_and_update(self)
    def walk_and_show(self, depth):
        global counter
        counter += 1
        depth += 1
        print '%d. class: PERSON  depth: %d' % (counter, depth, )
        members = PERSON._member_data_items
        for member in members:
            s1 = member.get_name()
            s2 = member.get_data_type()
            s3 = '%d' % member.get_container()
            obj1 = getattr(self, member.get_name())
            if member.get_container():
                s4 = '<container>'
            else:
                if type(obj1) != types.InstanceType:
                    s4 = '%s' % obj1
                else:
                    s4 = '<instance>'
            s5 = '%s%s%s  %s' % (s1.ljust(16), s2.ljust(16), s3.rjust(4), s4, )
            print '   ', s5
        for member in members:
            if member.get_container():
                for child in getattr(self, member.get_name()):
                    if type(child) == types.InstanceType:
                        child.walk_and_show(depth)
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_show(depth)
# end class PERSON


class ALLOCATEDBY(GeneratedsSuper):
    _member_data_items = [
        _MemberSpec('ALLOCATEDBY4', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY5', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY6', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY7', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY0', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY1', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY2', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY3', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY8', 'xs:string', 0),
        _MemberSpec('ALLOCATEDBY9', 'xs:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, ALLOCATEDBY4=None, ALLOCATEDBY5=None, ALLOCATEDBY6=None, ALLOCATEDBY7=None, ALLOCATEDBY0=None, ALLOCATEDBY1=None, ALLOCATEDBY2=None, ALLOCATEDBY3=None, ALLOCATEDBY8=None, ALLOCATEDBY9=None, valueOf_=''):
        self.ALLOCATEDBY4 = _cast(None, ALLOCATEDBY4)
        self.ALLOCATEDBY5 = _cast(None, ALLOCATEDBY5)
        self.ALLOCATEDBY6 = _cast(None, ALLOCATEDBY6)
        self.ALLOCATEDBY7 = _cast(None, ALLOCATEDBY7)
        self.ALLOCATEDBY0 = _cast(None, ALLOCATEDBY0)
        self.ALLOCATEDBY1 = _cast(None, ALLOCATEDBY1)
        self.ALLOCATEDBY2 = _cast(None, ALLOCATEDBY2)
        self.ALLOCATEDBY3 = _cast(None, ALLOCATEDBY3)
        self.ALLOCATEDBY8 = _cast(None, ALLOCATEDBY8)
        self.ALLOCATEDBY9 = _cast(None, ALLOCATEDBY9)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ALLOCATEDBY.subclass:
            return ALLOCATEDBY.subclass(*args_, **kwargs_)
        else:
            return ALLOCATEDBY(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ALLOCATEDBY4(self): return self.ALLOCATEDBY4
    def set_ALLOCATEDBY4(self, ALLOCATEDBY4): self.ALLOCATEDBY4 = ALLOCATEDBY4
    def get_ALLOCATEDBY5(self): return self.ALLOCATEDBY5
    def set_ALLOCATEDBY5(self, ALLOCATEDBY5): self.ALLOCATEDBY5 = ALLOCATEDBY5
    def get_ALLOCATEDBY6(self): return self.ALLOCATEDBY6
    def set_ALLOCATEDBY6(self, ALLOCATEDBY6): self.ALLOCATEDBY6 = ALLOCATEDBY6
    def get_ALLOCATEDBY7(self): return self.ALLOCATEDBY7
    def set_ALLOCATEDBY7(self, ALLOCATEDBY7): self.ALLOCATEDBY7 = ALLOCATEDBY7
    def get_ALLOCATEDBY0(self): return self.ALLOCATEDBY0
    def set_ALLOCATEDBY0(self, ALLOCATEDBY0): self.ALLOCATEDBY0 = ALLOCATEDBY0
    def get_ALLOCATEDBY1(self): return self.ALLOCATEDBY1
    def set_ALLOCATEDBY1(self, ALLOCATEDBY1): self.ALLOCATEDBY1 = ALLOCATEDBY1
    def get_ALLOCATEDBY2(self): return self.ALLOCATEDBY2
    def set_ALLOCATEDBY2(self, ALLOCATEDBY2): self.ALLOCATEDBY2 = ALLOCATEDBY2
    def get_ALLOCATEDBY3(self): return self.ALLOCATEDBY3
    def set_ALLOCATEDBY3(self, ALLOCATEDBY3): self.ALLOCATEDBY3 = ALLOCATEDBY3
    def get_ALLOCATEDBY8(self): return self.ALLOCATEDBY8
    def set_ALLOCATEDBY8(self, ALLOCATEDBY8): self.ALLOCATEDBY8 = ALLOCATEDBY8
    def get_ALLOCATEDBY9(self): return self.ALLOCATEDBY9
    def set_ALLOCATEDBY9(self, ALLOCATEDBY9): self.ALLOCATEDBY9 = ALLOCATEDBY9
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='ALLOCATEDBY', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='ALLOCATEDBY')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='ALLOCATEDBY'):
        if self.ALLOCATEDBY4 is not None:
            outfile.write(' ALLOCATEDBY4=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY4).encode(ExternalEncoding), input_name='ALLOCATEDBY4'), ))
        if self.ALLOCATEDBY5 is not None:
            outfile.write(' ALLOCATEDBY5=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY5).encode(ExternalEncoding), input_name='ALLOCATEDBY5'), ))
        if self.ALLOCATEDBY6 is not None:
            outfile.write(' ALLOCATEDBY6=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY6).encode(ExternalEncoding), input_name='ALLOCATEDBY6'), ))
        if self.ALLOCATEDBY7 is not None:
            outfile.write(' ALLOCATEDBY7=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY7).encode(ExternalEncoding), input_name='ALLOCATEDBY7'), ))
        outfile.write(' ALLOCATEDBY0=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY0).encode(ExternalEncoding), input_name='ALLOCATEDBY0'), ))
        if self.ALLOCATEDBY1 is not None:
            outfile.write(' ALLOCATEDBY1=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY1).encode(ExternalEncoding), input_name='ALLOCATEDBY1'), ))
        if self.ALLOCATEDBY2 is not None:
            outfile.write(' ALLOCATEDBY2=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY2).encode(ExternalEncoding), input_name='ALLOCATEDBY2'), ))
        if self.ALLOCATEDBY3 is not None:
            outfile.write(' ALLOCATEDBY3=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY3).encode(ExternalEncoding), input_name='ALLOCATEDBY3'), ))
        if self.ALLOCATEDBY8 is not None:
            outfile.write(' ALLOCATEDBY8=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY8).encode(ExternalEncoding), input_name='ALLOCATEDBY8'), ))
        if self.ALLOCATEDBY9 is not None:
            outfile.write(' ALLOCATEDBY9=%s' % (self.format_string(quote_attrib(self.ALLOCATEDBY9).encode(ExternalEncoding), input_name='ALLOCATEDBY9'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ALLOCATEDBY'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ALLOCATEDBY'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.ALLOCATEDBY4 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY4 = %s,\n' % (self.ALLOCATEDBY4,))
        if self.ALLOCATEDBY5 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY5 = %s,\n' % (self.ALLOCATEDBY5,))
        if self.ALLOCATEDBY6 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY6 = %s,\n' % (self.ALLOCATEDBY6,))
        if self.ALLOCATEDBY7 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY7 = %s,\n' % (self.ALLOCATEDBY7,))
        if self.ALLOCATEDBY0 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY0 = %s,\n' % (self.ALLOCATEDBY0,))
        if self.ALLOCATEDBY1 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY1 = %s,\n' % (self.ALLOCATEDBY1,))
        if self.ALLOCATEDBY2 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY2 = %s,\n' % (self.ALLOCATEDBY2,))
        if self.ALLOCATEDBY3 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY3 = %s,\n' % (self.ALLOCATEDBY3,))
        if self.ALLOCATEDBY8 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY8 = %s,\n' % (self.ALLOCATEDBY8,))
        if self.ALLOCATEDBY9 is not None:
            showIndent(outfile, level)
            outfile.write('ALLOCATEDBY9 = %s,\n' % (self.ALLOCATEDBY9,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('ALLOCATEDBY4'):
            self.ALLOCATEDBY4 = attrs.get('ALLOCATEDBY4').value
        if attrs.get('ALLOCATEDBY5'):
            self.ALLOCATEDBY5 = attrs.get('ALLOCATEDBY5').value
        if attrs.get('ALLOCATEDBY6'):
            self.ALLOCATEDBY6 = attrs.get('ALLOCATEDBY6').value
        if attrs.get('ALLOCATEDBY7'):
            self.ALLOCATEDBY7 = attrs.get('ALLOCATEDBY7').value
        if attrs.get('ALLOCATEDBY0'):
            self.ALLOCATEDBY0 = attrs.get('ALLOCATEDBY0').value
        if attrs.get('ALLOCATEDBY1'):
            self.ALLOCATEDBY1 = attrs.get('ALLOCATEDBY1').value
        if attrs.get('ALLOCATEDBY2'):
            self.ALLOCATEDBY2 = attrs.get('ALLOCATEDBY2').value
        if attrs.get('ALLOCATEDBY3'):
            self.ALLOCATEDBY3 = attrs.get('ALLOCATEDBY3').value
        if attrs.get('ALLOCATEDBY8'):
            self.ALLOCATEDBY8 = attrs.get('ALLOCATEDBY8').value
        if attrs.get('ALLOCATEDBY9'):
            self.ALLOCATEDBY9 = attrs.get('ALLOCATEDBY9').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
    def walk_and_update(self):
        members = ALLOCATEDBY._member_data_items
        for member in members:
            obj1 = getattr(self, member.get_name())
            if member.get_data_type() == 'xs:date':
                newvalue = date_calcs.date_from_string(obj1)
                setattr(self, member.get_name(), newvalue)
            elif member.get_container():
                for child in obj1:
                    if type(child) == types.InstanceType:
                        child.walk_and_update()
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_update()
        if ALLOCATEDBY.superclass != None:
          ALLOCATEDBY.superclass.walk_and_update(self)
    def walk_and_show(self, depth):
        global counter
        counter += 1
        depth += 1
        print '%d. class: ALLOCATEDBY  depth: %d' % (counter, depth, )
        members = ALLOCATEDBY._member_data_items
        for member in members:
            s1 = member.get_name()
            s2 = member.get_data_type()
            s3 = '%d' % member.get_container()
            obj1 = getattr(self, member.get_name())
            if member.get_container():
                s4 = '<container>'
            else:
                if type(obj1) != types.InstanceType:
                    s4 = '%s' % obj1
                else:
                    s4 = '<instance>'
            s5 = '%s%s%s  %s' % (s1.ljust(16), s2.ljust(16), s3.rjust(4), s4, )
            print '   ', s5
        for member in members:
            if member.get_container():
                for child in getattr(self, member.get_name()):
                    if type(child) == types.InstanceType:
                        child.walk_and_show(depth)
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_show(depth)
# end class ALLOCATEDBY


class VERSION(GeneratedsSuper):
    _member_data_items = [
        _MemberSpec('VERSION4', 'xs:string', 0),
        _MemberSpec('VERSION5', 'xs:string', 0),
        _MemberSpec('VERSION6', 'xs:string', 0),
        _MemberSpec('VERSION7', 'xs:string', 0),
        _MemberSpec('VERSION0', 'xs:string', 0),
        _MemberSpec('VERSION1', 'xs:string', 0),
        _MemberSpec('VERSION2', 'xs:string', 0),
        _MemberSpec('VERSION3', 'xs:string', 0),
        _MemberSpec('VERSION8', 'xs:string', 0),
        _MemberSpec('VERSION9', 'xs:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, VERSION4=None, VERSION5=None, VERSION6=None, VERSION7=None, VERSION0=None, VERSION1=None, VERSION2=None, VERSION3=None, VERSION8=None, VERSION9=None, valueOf_=''):
        self.VERSION4 = _cast(None, VERSION4)
        self.VERSION5 = _cast(None, VERSION5)
        self.VERSION6 = _cast(None, VERSION6)
        self.VERSION7 = _cast(None, VERSION7)
        self.VERSION0 = _cast(None, VERSION0)
        self.VERSION1 = _cast(None, VERSION1)
        self.VERSION2 = _cast(None, VERSION2)
        self.VERSION3 = _cast(None, VERSION3)
        self.VERSION8 = _cast(None, VERSION8)
        self.VERSION9 = _cast(None, VERSION9)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if VERSION.subclass:
            return VERSION.subclass(*args_, **kwargs_)
        else:
            return VERSION(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_VERSION4(self): return self.VERSION4
    def set_VERSION4(self, VERSION4): self.VERSION4 = VERSION4
    def get_VERSION5(self): return self.VERSION5
    def set_VERSION5(self, VERSION5): self.VERSION5 = VERSION5
    def get_VERSION6(self): return self.VERSION6
    def set_VERSION6(self, VERSION6): self.VERSION6 = VERSION6
    def get_VERSION7(self): return self.VERSION7
    def set_VERSION7(self, VERSION7): self.VERSION7 = VERSION7
    def get_VERSION0(self): return self.VERSION0
    def set_VERSION0(self, VERSION0): self.VERSION0 = VERSION0
    def get_VERSION1(self): return self.VERSION1
    def set_VERSION1(self, VERSION1): self.VERSION1 = VERSION1
    def get_VERSION2(self): return self.VERSION2
    def set_VERSION2(self, VERSION2): self.VERSION2 = VERSION2
    def get_VERSION3(self): return self.VERSION3
    def set_VERSION3(self, VERSION3): self.VERSION3 = VERSION3
    def get_VERSION8(self): return self.VERSION8
    def set_VERSION8(self, VERSION8): self.VERSION8 = VERSION8
    def get_VERSION9(self): return self.VERSION9
    def set_VERSION9(self, VERSION9): self.VERSION9 = VERSION9
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='VERSION', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='VERSION')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='VERSION'):
        if self.VERSION4 is not None:
            outfile.write(' VERSION4=%s' % (self.format_string(quote_attrib(self.VERSION4).encode(ExternalEncoding), input_name='VERSION4'), ))
        if self.VERSION5 is not None:
            outfile.write(' VERSION5=%s' % (self.format_string(quote_attrib(self.VERSION5).encode(ExternalEncoding), input_name='VERSION5'), ))
        if self.VERSION6 is not None:
            outfile.write(' VERSION6=%s' % (self.format_string(quote_attrib(self.VERSION6).encode(ExternalEncoding), input_name='VERSION6'), ))
        if self.VERSION7 is not None:
            outfile.write(' VERSION7=%s' % (self.format_string(quote_attrib(self.VERSION7).encode(ExternalEncoding), input_name='VERSION7'), ))
        outfile.write(' VERSION0=%s' % (self.format_string(quote_attrib(self.VERSION0).encode(ExternalEncoding), input_name='VERSION0'), ))
        if self.VERSION1 is not None:
            outfile.write(' VERSION1=%s' % (self.format_string(quote_attrib(self.VERSION1).encode(ExternalEncoding), input_name='VERSION1'), ))
        if self.VERSION2 is not None:
            outfile.write(' VERSION2=%s' % (self.format_string(quote_attrib(self.VERSION2).encode(ExternalEncoding), input_name='VERSION2'), ))
        if self.VERSION3 is not None:
            outfile.write(' VERSION3=%s' % (self.format_string(quote_attrib(self.VERSION3).encode(ExternalEncoding), input_name='VERSION3'), ))
        if self.VERSION8 is not None:
            outfile.write(' VERSION8=%s' % (self.format_string(quote_attrib(self.VERSION8).encode(ExternalEncoding), input_name='VERSION8'), ))
        if self.VERSION9 is not None:
            outfile.write(' VERSION9=%s' % (self.format_string(quote_attrib(self.VERSION9).encode(ExternalEncoding), input_name='VERSION9'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='VERSION'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VERSION'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.VERSION4 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION4 = %s,\n' % (self.VERSION4,))
        if self.VERSION5 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION5 = %s,\n' % (self.VERSION5,))
        if self.VERSION6 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION6 = %s,\n' % (self.VERSION6,))
        if self.VERSION7 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION7 = %s,\n' % (self.VERSION7,))
        if self.VERSION0 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION0 = %s,\n' % (self.VERSION0,))
        if self.VERSION1 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION1 = %s,\n' % (self.VERSION1,))
        if self.VERSION2 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION2 = %s,\n' % (self.VERSION2,))
        if self.VERSION3 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION3 = %s,\n' % (self.VERSION3,))
        if self.VERSION8 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION8 = %s,\n' % (self.VERSION8,))
        if self.VERSION9 is not None:
            showIndent(outfile, level)
            outfile.write('VERSION9 = %s,\n' % (self.VERSION9,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('VERSION4'):
            self.VERSION4 = attrs.get('VERSION4').value
        if attrs.get('VERSION5'):
            self.VERSION5 = attrs.get('VERSION5').value
        if attrs.get('VERSION6'):
            self.VERSION6 = attrs.get('VERSION6').value
        if attrs.get('VERSION7'):
            self.VERSION7 = attrs.get('VERSION7').value
        if attrs.get('VERSION0'):
            self.VERSION0 = attrs.get('VERSION0').value
        if attrs.get('VERSION1'):
            self.VERSION1 = attrs.get('VERSION1').value
        if attrs.get('VERSION2'):
            self.VERSION2 = attrs.get('VERSION2').value
        if attrs.get('VERSION3'):
            self.VERSION3 = attrs.get('VERSION3').value
        if attrs.get('VERSION8'):
            self.VERSION8 = attrs.get('VERSION8').value
        if attrs.get('VERSION9'):
            self.VERSION9 = attrs.get('VERSION9').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
    def walk_and_update(self):
        members = VERSION._member_data_items
        for member in members:
            obj1 = getattr(self, member.get_name())
            if member.get_data_type() == 'xs:date':
                newvalue = date_calcs.date_from_string(obj1)
                setattr(self, member.get_name(), newvalue)
            elif member.get_container():
                for child in obj1:
                    if type(child) == types.InstanceType:
                        child.walk_and_update()
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_update()
        if VERSION.superclass != None:
          VERSION.superclass.walk_and_update(self)
    def walk_and_show(self, depth):
        global counter
        counter += 1
        depth += 1
        print '%d. class: VERSION  depth: %d' % (counter, depth, )
        members = VERSION._member_data_items
        for member in members:
            s1 = member.get_name()
            s2 = member.get_data_type()
            s3 = '%d' % member.get_container()
            obj1 = getattr(self, member.get_name())
            if member.get_container():
                s4 = '<container>'
            else:
                if type(obj1) != types.InstanceType:
                    s4 = '%s' % obj1
                else:
                    s4 = '<instance>'
            s5 = '%s%s%s  %s' % (s1.ljust(16), s2.ljust(16), s3.rjust(4), s4, )
            print '   ', s5
        for member in members:
            if member.get_container():
                for child in getattr(self, member.get_name()):
                    if type(child) == types.InstanceType:
                        child.walk_and_show(depth)
            else:
                obj1 = getattr(self, member.get_name())
                if type(obj1) == types.InstanceType:
                    obj1.walk_and_show(depth)
# end class VERSION


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
Options:
    -s        Use the SAX parser, not the minidom parser.
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = TODOLIST.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="TODOLIST", 
        namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = TODOLIST.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="TODOLIST",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = TODOLIST.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('from todolist import *\n\n')
    sys.stdout.write('rootObj = TODOLIST(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_="TODOLIST")
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()
    #import pdb
    #pdb.run('main()')

